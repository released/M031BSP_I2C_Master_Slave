; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DBUILD_SLAVE_I2C --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;22     
;;;23     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c1f              LDR      r4,|L1.132|
000006  2116              MOVS     r1,#0x16
000008  2288              MOVS     r2,#0x88
                  |L1.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6021              STR      r1,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L1.10|
;;;24     {
;;;25         /* Unlock protected registers */
;;;26         SYS_UnlockReg();
;;;27     
;;;28         /* Enable HIRC clock (Internal RC 48MHz) */
;;;29         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;30     
;;;31         /* Wait for HIRC clock ready */
;;;32         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;33     
;;;34         /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;35         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;36     
;;;37         /* Enable UART0 clock */
;;;38         CLK_EnableModuleClock(UART0_MODULE);
00002a  4d17              LDR      r5,|L1.136|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;39     
;;;40         /* Switch UART0 clock source to HIRC */
;;;41         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
000032  2103              MOVS     r1,#3
000034  2200              MOVS     r2,#0
000036  0609              LSLS     r1,r1,#24
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;42     
;;;43         /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;44         SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk)) |
00003e  06a8              LSLS     r0,r5,#26
000040  6bc1              LDR      r1,[r0,#0x3c]
000042  22ff              MOVS     r2,#0xff
000044  0412              LSLS     r2,r2,#16
000046  4391              BICS     r1,r1,r2
000048  2233              MOVS     r2,#0x33
00004a  0452              LSLS     r2,r2,#17
00004c  1889              ADDS     r1,r1,r2
00004e  63c1              STR      r1,[r0,#0x3c]
;;;45                         (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;46     
;;;47         /* Enable IP clock */
;;;48         CLK_EnableModuleClock(TMR0_MODULE);
000050  4d0e              LDR      r5,|L1.140|
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       CLK_EnableModuleClock
;;;49     
;;;50         /* Select IP clock source */
;;;51         CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, 0);
000058  2107              MOVS     r1,#7
00005a  2200              MOVS     r2,#0
00005c  0209              LSLS     r1,r1,#8
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       CLK_SetModuleClock
;;;52     
;;;53     
;;;54     #if defined (BUILD_MASTER_I2C)	
;;;55     	//I2C 0 : PC1 : SCL , PC0 : SDA
;;;56         CLK_EnableModuleClock(I2C0_MODULE);
;;;57     
;;;58         /* Set I2C0 multi-function pins */
;;;59         SYS->GPC_MFPL = (SYS->GPC_MFPL & ~(SYS_GPC_MFPL_PC1MFP_Msk | SYS_GPC_MFPL_PC0MFP_Msk)) |
;;;60                         (SYS_GPC_MFPL_PC0MFP_I2C0_SDA | SYS_GPC_MFPL_PC1MFP_I2C0_SCL);
;;;61     
;;;62     	//I2C 1 : PA12 : SCL , PA13 : SDA
;;;63     //    CLK_EnableModuleClock(I2C1_MODULE);
;;;64     
;;;65     //    /* Set I2C0 multi-function pins */
;;;66     //    SYS->GPA_MFPH = (SYS->GPA_MFPH & ~(SYS_GPA_MFPH_PA12MFP_Msk | SYS_GPA_MFPH_PA13MFP_Msk)) |
;;;67     //                    (SYS_GPA_MFPH_PA13MFP_I2C1_SDA | SYS_GPA_MFPH_PA12MFP_I2C1_SCL);
;;;68     
;;;69     
;;;70     #elif defined (BUILD_SLAVE_I2C)	//PC1 : SCL , PC0 : SDA
;;;71         CLK_EnableModuleClock(I2C0_MODULE);
000064  4807              LDR      r0,|L1.132|
000066  38f8              SUBS     r0,r0,#0xf8
000068  f7fffffe          BL       CLK_EnableModuleClock
;;;72     
;;;73         /* Set I2C0 multi-function pins */
;;;74         SYS->GPC_MFPL = (SYS->GPC_MFPL & ~(SYS_GPC_MFPL_PC1MFP_Msk | SYS_GPC_MFPL_PC0MFP_Msk)) |
00006c  4805              LDR      r0,|L1.132|
00006e  38c0              SUBS     r0,r0,#0xc0
000070  6801              LDR      r1,[r0,#0]
000072  0a09              LSRS     r1,r1,#8
000074  0209              LSLS     r1,r1,#8
000076  3199              ADDS     r1,r1,#0x99
000078  6001              STR      r1,[r0,#0]
;;;75                         (SYS_GPC_MFPL_PC0MFP_I2C0_SDA | SYS_GPC_MFPL_PC1MFP_I2C0_SCL);
;;;76     #endif
;;;77     
;;;78         /* Update System Core Clock */
;;;79         SystemCoreClockUpdate();
00007a  f7fffffe          BL       SystemCoreClockUpdate
00007e  2000              MOVS     r0,#0
000080  6020              STR      r0,[r4,#0]
;;;80     
;;;81         /* Lock protected registers */
;;;82         SYS_LockReg();
;;;83     }
000082  bd70              POP      {r4-r6,pc}
;;;84     
                          ENDP

                  |L1.132|
                          DCD      0x40000100
                  |L1.136|
                          DCD      0x5f803d10
                  |L1.140|
                          DCD      0x5e800002

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;92     
;;;93     int main()
000000  f7fffffe          BL       SYS_Init
;;;94     {
;;;95         SYS_Init();
;;;96     
;;;97         SYS_ResetModule(UART0_RST);
000004  4818              LDR      r0,|L2.104|
000006  f7fffffe          BL       SYS_ResetModule
;;;98     
;;;99         /* Configure UART0 and set UART0 baud rate */
;;;100        UART_Open(UART0, 115200);
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4817              LDR      r0,|L2.108|
000010  f7fffffe          BL       UART_Open
;;;101    
;;;102    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000014  f7fffffe          BL       CLK_GetCPUFreq
000018  4601              MOV      r1,r0
00001a  a015              ADR      r0,|L2.112|
00001c  f7fffffe          BL       __2printf
;;;103    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000020  f7fffffe          BL       CLK_GetHXTFreq
000024  4601              MOV      r1,r0
000026  a019              ADR      r0,|L2.140|
000028  f7fffffe          BL       __2printf
;;;104    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00002c  f7fffffe          BL       CLK_GetLXTFreq
000030  4601              MOV      r1,r0
000032  a01c              ADR      r0,|L2.164|
000034  f7fffffe          BL       __2printf
;;;105    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000038  f7fffffe          BL       CLK_GetPCLK0Freq
00003c  4601              MOV      r1,r0
00003e  a01f              ADR      r0,|L2.188|
000040  f7fffffe          BL       __2printf
;;;106    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
000044  f7fffffe          BL       CLK_GetPCLK1Freq
000048  4601              MOV      r1,r0
00004a  a023              ADR      r0,|L2.216|
00004c  f7fffffe          BL       __2printf
;;;107    	
;;;108    
;;;109    #if defined (BUILD_MASTER_I2C)
;;;110    	//I2C 0 : PC1 : SCL , PC0 : SDA
;;;111    	//I2C 1 : PA12 : SCL , PA13 : SDA
;;;112    	I2Cx_Master_Init();
;;;113    #elif defined (BUILD_SLAVE_I2C)	//PC1 : SCL , PC0 : SDA
;;;114    	I2Cx_Slave_Init();
000050  f7fffffe          BL       I2Cx_Slave_Init
;;;115    
;;;116    #endif
;;;117    
;;;118        /* Got no where to go, just loop forever */
;;;119        while(1)
;;;120        {
;;;121    #if defined (BUILD_MASTER_I2C)
;;;122    		//I2C 0 : PC1 : SCL , PC0 : SDA
;;;123    		//I2C 1 : PA12 : SCL , PA13 : SDA
;;;124    		I2Cx_Master_example();
;;;125    #elif defined (BUILD_SLAVE_I2C)	//PC1 : SCL , PC0 : SDA
;;;126    		I2Cx_Slave_example();
;;;127    #endif
;;;128    
;;;129            TIMER_Delay(TIMER0, 1000000);
000054  4c27              LDR      r4,|L2.244|
000056  4d28              LDR      r5,|L2.248|
                  |L2.88|
000058  f7fffffe          BL       I2Cx_Slave_example
00005c  4621              MOV      r1,r4
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       TIMER_Delay
000064  e7f8              B        |L2.88|
;;;130    
;;;131        }
;;;132    }
;;;133    
                          ENDP

000066  0000              DCW      0x0000
                  |L2.104|
                          DCD      0x04000010
                  |L2.108|
                          DCD      0x40070000
                  |L2.112|
000070  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000074  4b5f4765
000078  74435055
00007c  46726571
000080  203a2025
000084  38640d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L2.140|
00008c  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000090  47657448
000094  58544672
000098  6571203a
00009c  20253864
0000a0  0d0a00  
0000a3  00                DCB      0
                  |L2.164|
0000a4  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000a8  4765744c
0000ac  58544672
0000b0  6571203a
0000b4  20253864
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L2.188|
0000bc  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000c0  47657450
0000c4  434c4b30
0000c8  46726571
0000cc  203a2025
0000d0  38640d0a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L2.216|
0000d8  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000dc  47657450
0000e0  434c4b31
0000e4  46726571
0000e8  203a2025
0000ec  38640d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L2.244|
                          DCD      0x000f4240
                  |L2.248|
                          DCD      0x40050000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
