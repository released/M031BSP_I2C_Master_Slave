; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hw_config.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hw_config.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DL_WING_CONTROL --omf_browse=.\obj\hw_config.crf ..\hw_config.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;701    
;;;702    void ADC_IRQHandler(void)
000000  4902              LDR      r1,|L1.12|
;;;703    {
;;;704        g_u32AdcIntFlag = 1;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]  ; g_u32AdcIntFlag
;;;705        ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT); /* Clear the A/D interrupt flag */
000006  4902              LDR      r1,|L1.16|
000008  6108              STR      r0,[r1,#0x10]
;;;706    }
00000a  4770              BX       lr
;;;707    
                          ENDP

                  |L1.12|
                          DCD      ||.data||
                  |L1.16|
                          DCD      0x40043080

                          AREA ||i.Clr_Interrupt_L_R_WING_DOWN_Y_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_DOWN_Y_BTN PROC
;;;419    
;;;420    void Clr_Interrupt_L_R_WING_DOWN_Y_BTN(void)
000000  4901              LDR      r1,|L2.8|
;;;421    {
;;;422    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_DOWN_Y_BTN, GPIO_PIN_L_R_WING_DOWN_Y_BTN);
000002  2008              MOVS     r0,#8
000004  6208              STR      r0,[r1,#0x20]
;;;423    }
000006  4770              BX       lr
;;;424    
                          ENDP

                  |L2.8|
                          DCD      0x40004000

                          AREA ||i.Clr_Interrupt_L_R_WING_HALL_SENSOR_INT||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_HALL_SENSOR_INT PROC
;;;479    
;;;480    void Clr_Interrupt_L_R_WING_HALL_SENSOR_INT(void)
000000  2001              MOVS     r0,#1
;;;481    {
;;;482    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_HALL_SENSOR_INT, GPIO_PIN_L_R_WING_HALL_SENSOR_INT);
000002  4902              LDR      r1,|L3.12|
000004  0380              LSLS     r0,r0,#14
000006  6208              STR      r0,[r1,#0x20]
;;;483    }
000008  4770              BX       lr
;;;484    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40004000

                          AREA ||i.Clr_Interrupt_L_R_WING_L1_R1_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_L1_R1_BTN PROC
;;;459    
;;;460    void Clr_Interrupt_L_R_WING_L1_R1_BTN(void)
000000  4901              LDR      r1,|L4.8|
;;;461    {
;;;462    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_L1_R1_BTN, GPIO_PIN_L_R_WING_L1_R1_BTN);
000002  2004              MOVS     r0,#4
000004  6208              STR      r0,[r1,#0x20]
;;;463    }
000006  4770              BX       lr
;;;464    
                          ENDP

                  |L4.8|
                          DCD      0x40004140

                          AREA ||i.Clr_Interrupt_L_R_WING_LEFT_B_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_LEFT_B_BTN PROC
;;;439    
;;;440    void Clr_Interrupt_L_R_WING_LEFT_B_BTN(void)
000000  4901              LDR      r1,|L5.8|
;;;441    {
;;;442    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_LEFT_B_BTN, GPIO_PIN_L_R_WING_LEFT_B_BTN);
000002  2002              MOVS     r0,#2
000004  6208              STR      r0,[r1,#0x20]
;;;443    }
000006  4770              BX       lr
;;;444    
                          ENDP

                  |L5.8|
                          DCD      0x40004000

                          AREA ||i.Clr_Interrupt_L_R_WING_RIGHT_A_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_RIGHT_A_BTN PROC
;;;429    
;;;430    void Clr_Interrupt_L_R_WING_RIGHT_A_BTN(void)
000000  4901              LDR      r1,|L6.8|
;;;431    {
;;;432    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_RIGHT_A_BTN, GPIO_PIN_L_R_WING_RIGHT_A_BTN);
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;433    }
000006  4770              BX       lr
;;;434    
                          ENDP

                  |L6.8|
                          DCD      0x40004000

                          AREA ||i.Clr_Interrupt_L_R_WING_THUMB_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_THUMB_BTN PROC
;;;469    
;;;470    void Clr_Interrupt_L_R_WING_THUMB_BTN(void)
000000  4901              LDR      r1,|L7.8|
;;;471    {
;;;472    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_THUMB_BTN, GPIO_PIN_L_R_WING_THUMB_BTN);
000002  2008              MOVS     r0,#8
000004  6208              STR      r0,[r1,#0x20]
;;;473    }
000006  4770              BX       lr
;;;474    
                          ENDP

                  |L7.8|
                          DCD      0x40004140

                          AREA ||i.Clr_Interrupt_L_R_WING_UP_X_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_UP_X_BTN PROC
;;;409    
;;;410    void Clr_Interrupt_L_R_WING_UP_X_BTN(void)
000000  4901              LDR      r1,|L8.8|
;;;411    {
;;;412    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_UP_X_BTN, GPIO_PIN_L_R_WING_UP_X_BTN);
000002  2004              MOVS     r0,#4
000004  6208              STR      r0,[r1,#0x20]
;;;413    }
000006  4770              BX       lr
;;;414    
                          ENDP

                  |L8.8|
                          DCD      0x40004000

                          AREA ||i.Clr_Interrupt_L_R_WING_VIEW_MENU_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_L_R_WING_VIEW_MENU_BTN PROC
;;;449    
;;;450    void Clr_Interrupt_L_R_WING_VIEW_MENU_BTN(void)
000000  2001              MOVS     r0,#1
;;;451    {
;;;452    	GPIO_CLR_INT_FLAG(GPIO_PORT_L_R_WING_VIEW_MENU_BTN, GPIO_PIN_L_R_WING_VIEW_MENU_BTN);
000002  4902              LDR      r1,|L9.12|
000004  03c0              LSLS     r0,r0,#15
000006  6208              STR      r0,[r1,#0x20]
;;;453    }
000008  4770              BX       lr
;;;454    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40004140

                          AREA ||i.Clr_Interrupt_R_WING_HOME_BTN||, CODE, READONLY, ALIGN=2

                  Clr_Interrupt_R_WING_HOME_BTN PROC
;;;489    
;;;490    void Clr_Interrupt_R_WING_HOME_BTN(void)
000000  4901              LDR      r1,|L10.8|
;;;491    {
;;;492    	GPIO_CLR_INT_FLAG(GPIO_PORT_R_WING_HOME_BTN, GPIO_PIN_R_WING_HOME_BTN);
000002  2020              MOVS     r0,#0x20
000004  6208              STR      r0,[r1,#0x20]
;;;493    }
000006  4770              BX       lr
;;;494    
                          ENDP

                  |L10.8|
                          DCD      0x40004140

                          AREA ||i.GPAB_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPAB_IRQHandler PROC
;;;494    
;;;495    void GPAB_IRQHandler(void)
000000  b538              PUSH     {r3-r5,lr}
;;;496    {
;;;497        volatile uint32_t temp;
;;;498    
;;;499        if(Is_Interrupt_L_R_WING_UP_X_BTN())
000002  f7fffffe          BL       Is_Interrupt_L_R_WING_UP_X_BTN
;;;500        {
;;;501    		#if defined (L_WING_CONTROL)
;;;502    		set_UP_BTN;
000006  4b15              LDR      r3,|L11.92|
000008  2408              MOVS     r4,#8
00000a  2504              MOVS     r5,#4
00000c  4a14              LDR      r2,|L11.96|
00000e  2800              CMP      r0,#0                 ;499
000010  d004              BEQ      |L11.28|
000012  78d8              LDRB     r0,[r3,#3]  ; ButtonStatus
000014  4320              ORRS     r0,r0,r4
000016  70d8              STRB     r0,[r3,#3]
000018  6215              STR      r5,[r2,#0x20]
;;;503    
;;;504    		#elif defined (R_WING_CONTROL)
;;;505    		set_X_BTN;
;;;506    		#endif		
;;;507            Clr_Interrupt_L_R_WING_UP_X_BTN();
;;;508        }
;;;509    	else if (Is_Interrupt_L_R_WING_DOWN_Y_BTN())
;;;510    	{
;;;511    		#if defined (L_WING_CONTROL)
;;;512    		set_DOWN_BTN;
;;;513    
;;;514    		#elif defined (R_WING_CONTROL)
;;;515    		set_Y_BTN;
;;;516    		#endif	
;;;517            Clr_Interrupt_L_R_WING_DOWN_Y_BTN();
;;;518    	}
;;;519    	else if (Is_Interrupt_L_R_WING_RIGHT_A_BTN())
;;;520    	{
;;;521    		#if defined (L_WING_CONTROL)
;;;522    		set_RIGHT_BTN;
;;;523    
;;;524    		#elif defined (R_WING_CONTROL)
;;;525    		set_A_BTN;
;;;526    		#endif	
;;;527    		Clr_Interrupt_L_R_WING_RIGHT_A_BTN();
;;;528    	}
;;;529    	else if (Is_Interrupt_L_R_WING_LEFT_B_BTN())
;;;530    	{
;;;531    		#if defined (L_WING_CONTROL)
;;;532    		set_LEFT_BTN;
;;;533    
;;;534    		#elif defined (R_WING_CONTROL)
;;;535    		set_B_BTN;
;;;536    		#endif	
;;;537    		Clr_Interrupt_L_R_WING_LEFT_B_BTN();
;;;538    	}
;;;539    	else if (Is_Interrupt_L_R_WING_HALL_SENSOR_INT())
;;;540    	{
;;;541    		/*wake up MCU ? */
;;;542    		
;;;543    		Clr_Interrupt_L_R_WING_HALL_SENSOR_INT();
;;;544    	}	
;;;545        else
;;;546        {
;;;547            /* Un-expected interrupt. Just clear all PB interrupts */
;;;548            temp = PA->INTSRC;
;;;549            PA->INTSRC = temp;
;;;550        }
;;;551    }
00001a  bd38              POP      {r3-r5,pc}
                  |L11.28|
00001c  f7fffffe          BL       Is_Interrupt_L_R_WING_DOWN_Y_BTN
000020  2101              MOVS     r1,#1                 ;512
000022  2800              CMP      r0,#0                 ;509
000024  d002              BEQ      |L11.44|
000026  78d8              LDRB     r0,[r3,#3]            ;512  ; ButtonStatus
000028  4308              ORRS     r0,r0,r1              ;512
00002a  e00f              B        |L11.76|
                  |L11.44|
00002c  f7fffffe          BL       Is_Interrupt_L_R_WING_RIGHT_A_BTN
000030  2402              MOVS     r4,#2                 ;522
000032  2800              CMP      r0,#0                 ;519
000034  d004              BEQ      |L11.64|
000036  78d8              LDRB     r0,[r3,#3]            ;522  ; ButtonStatus
000038  4320              ORRS     r0,r0,r4              ;522
00003a  70d8              STRB     r0,[r3,#3]            ;522
00003c  6211              STR      r1,[r2,#0x20]         ;522
00003e  bd38              POP      {r3-r5,pc}
                  |L11.64|
000040  f7fffffe          BL       Is_Interrupt_L_R_WING_LEFT_B_BTN
000044  2800              CMP      r0,#0                 ;529
000046  d004              BEQ      |L11.82|
000048  78d8              LDRB     r0,[r3,#3]            ;532  ; ButtonStatus
00004a  4328              ORRS     r0,r0,r5              ;532
                  |L11.76|
00004c  70d8              STRB     r0,[r3,#3]            ;512
00004e  6214              STR      r4,[r2,#0x20]         ;512
000050  bd38              POP      {r3-r5,pc}
                  |L11.82|
000052  6a10              LDR      r0,[r2,#0x20]
000054  6a10              LDR      r0,[r2,#0x20]         ;548
000056  9000              STR      r0,[sp,#0]            ;549
000058  6210              STR      r0,[r2,#0x20]         ;549
00005a  bd38              POP      {r3-r5,pc}
;;;552    
                          ENDP

                  |L11.92|
                          DCD      ||.data||
                  |L11.96|
                          DCD      0x40004000

                          AREA ||i.GPCDEF_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPCDEF_IRQHandler PROC
;;;552    
;;;553    void GPCDEF_IRQHandler(void)
000000  b508              PUSH     {r3,lr}
000002  4a0d              LDR      r2,|L12.56|
000004  6a10              LDR      r0,[r2,#0x20]
;;;554    {
;;;555        volatile uint32_t temp;
;;;556    
;;;557        /* To check if PC.5 interrupt occurred */
;;;558        if(Is_Interrupt_L_R_WING_VIEW_MENU_BTN())
;;;559        {
;;;560    		set_VIEW_MENU_BACK_START_BTN;
;;;561            Clr_Interrupt_L_R_WING_VIEW_MENU_BTN();
;;;562        }
;;;563    	else if (Is_Interrupt_L_R_WING_L1_R1_BTN())
000006  f7fffffe          BL       Is_Interrupt_L_R_WING_L1_R1_BTN
00000a  4b0c              LDR      r3,|L12.60|
00000c  2800              CMP      r0,#0
00000e  d005              BEQ      |L12.28|
;;;564    	{
;;;565    		set_L1_R1_BTN;
000010  78d8              LDRB     r0,[r3,#3]  ; ButtonStatus
000012  2110              MOVS     r1,#0x10
000014  4308              ORRS     r0,r0,r1
000016  70d8              STRB     r0,[r3,#3]
000018  2004              MOVS     r0,#4
;;;566            Clr_Interrupt_L_R_WING_L1_R1_BTN();
00001a  e00b              B        |L12.52|
                  |L12.28|
;;;567    	}
;;;568    	else if (Is_Interrupt_L_R_WING_THUMB_BTN())
00001c  f7fffffe          BL       Is_Interrupt_L_R_WING_THUMB_BTN
000020  2800              CMP      r0,#0
000022  d005              BEQ      |L12.48|
;;;569    	{
;;;570    		set_THUMB_L_R_BTN;
000024  78d8              LDRB     r0,[r3,#3]  ; ButtonStatus
000026  2140              MOVS     r1,#0x40
000028  4308              ORRS     r0,r0,r1
00002a  70d8              STRB     r0,[r3,#3]
00002c  2008              MOVS     r0,#8
;;;571    		Clr_Interrupt_L_R_WING_THUMB_BTN();
00002e  e001              B        |L12.52|
                  |L12.48|
;;;572    	}
;;;573    	#if defined (R_WING_CONTROL)	
;;;574    	else if (Is_Interrupt_R_WING_HOME_BTN())
;;;575    	{
;;;576    		set_HOME_BTN;
;;;577    		Clr_Interrupt_R_WING_HOME_BTN();
;;;578    	}
;;;579    	#endif
;;;580        else
;;;581        {
;;;582            /* Un-expected interrupt. Just clear all PC interrupts */
;;;583            temp = PF->INTSRC;
000030  6a10              LDR      r0,[r2,#0x20]
000032  9000              STR      r0,[sp,#0]
                  |L12.52|
000034  6210              STR      r0,[r2,#0x20]
;;;584            PF->INTSRC = temp;
;;;585        }
;;;586    }
000036  bd08              POP      {r3,pc}
;;;587    
                          ENDP

                  |L12.56|
                          DCD      0x40004140
                  |L12.60|
                          DCD      ||.data||

                          AREA ||i.Is_Interrupt_L_R_WING_DOWN_Y_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_DOWN_Y_BTN PROC
;;;414    
;;;415    uint8_t Is_Interrupt_L_R_WING_DOWN_Y_BTN(void)
000000  4802              LDR      r0,|L13.12|
;;;416    {
;;;417    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_DOWN_Y_BTN, GPIO_PIN_L_R_WING_DOWN_Y_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
;;;418    }
000008  4770              BX       lr
;;;419    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x40004000

                          AREA ||i.Is_Interrupt_L_R_WING_HALL_SENSOR_INT||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_HALL_SENSOR_INT PROC
;;;474    
;;;475    uint8_t Is_Interrupt_L_R_WING_HALL_SENSOR_INT(void)
000000  4801              LDR      r0,|L14.8|
;;;476    {
;;;477    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_HALL_SENSOR_INT, GPIO_PIN_L_R_WING_HALL_SENSOR_INT));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2000              MOVS     r0,#0
;;;478    }
000006  4770              BX       lr
;;;479    
                          ENDP

                  |L14.8|
                          DCD      0x40004000

                          AREA ||i.Is_Interrupt_L_R_WING_L1_R1_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_L1_R1_BTN PROC
;;;454    
;;;455    uint8_t Is_Interrupt_L_R_WING_L1_R1_BTN(void)
000000  4802              LDR      r0,|L15.12|
;;;456    {
;;;457    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_L1_R1_BTN, GPIO_PIN_L_R_WING_L1_R1_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2104              MOVS     r1,#4
000006  4008              ANDS     r0,r0,r1
;;;458    }
000008  4770              BX       lr
;;;459    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      0x40004140

                          AREA ||i.Is_Interrupt_L_R_WING_LEFT_B_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_LEFT_B_BTN PROC
;;;434    
;;;435    uint8_t Is_Interrupt_L_R_WING_LEFT_B_BTN(void)
000000  4802              LDR      r0,|L16.12|
;;;436    {
;;;437    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_LEFT_B_BTN, GPIO_PIN_L_R_WING_LEFT_B_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2102              MOVS     r1,#2
000006  4008              ANDS     r0,r0,r1
;;;438    }
000008  4770              BX       lr
;;;439    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40004000

                          AREA ||i.Is_Interrupt_L_R_WING_RIGHT_A_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_RIGHT_A_BTN PROC
;;;424    
;;;425    uint8_t Is_Interrupt_L_R_WING_RIGHT_A_BTN(void)
000000  4802              LDR      r0,|L17.12|
;;;426    {
;;;427    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_RIGHT_A_BTN, GPIO_PIN_L_R_WING_RIGHT_A_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;428    }
000008  4770              BX       lr
;;;429    
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      0x40004000

                          AREA ||i.Is_Interrupt_L_R_WING_THUMB_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_THUMB_BTN PROC
;;;464    
;;;465    uint8_t Is_Interrupt_L_R_WING_THUMB_BTN(void)
000000  4802              LDR      r0,|L18.12|
;;;466    {
;;;467    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_THUMB_BTN, GPIO_PIN_L_R_WING_THUMB_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
;;;468    }
000008  4770              BX       lr
;;;469    
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      0x40004140

                          AREA ||i.Is_Interrupt_L_R_WING_UP_X_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_UP_X_BTN PROC
;;;404    
;;;405    uint8_t Is_Interrupt_L_R_WING_UP_X_BTN(void)
000000  4802              LDR      r0,|L19.12|
;;;406    {
;;;407    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_UP_X_BTN, GPIO_PIN_L_R_WING_UP_X_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2104              MOVS     r1,#4
000006  4008              ANDS     r0,r0,r1
;;;408    }
000008  4770              BX       lr
;;;409    
                          ENDP

00000a  0000              DCW      0x0000
                  |L19.12|
                          DCD      0x40004000

                          AREA ||i.Is_Interrupt_L_R_WING_VIEW_MENU_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_L_R_WING_VIEW_MENU_BTN PROC
;;;444    
;;;445    uint8_t Is_Interrupt_L_R_WING_VIEW_MENU_BTN(void)
000000  4801              LDR      r0,|L20.8|
;;;446    {
;;;447    	return (GPIO_GET_INT_FLAG(GPIO_PORT_L_R_WING_VIEW_MENU_BTN, GPIO_PIN_L_R_WING_VIEW_MENU_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2000              MOVS     r0,#0
;;;448    }
000006  4770              BX       lr
;;;449    
                          ENDP

                  |L20.8|
                          DCD      0x40004140

                          AREA ||i.Is_Interrupt_R_WING_HOME_BTN||, CODE, READONLY, ALIGN=2

                  Is_Interrupt_R_WING_HOME_BTN PROC
;;;484    
;;;485    uint8_t Is_Interrupt_R_WING_HOME_BTN(void)
000000  4802              LDR      r0,|L21.12|
;;;486    {
;;;487    	return (GPIO_GET_INT_FLAG(GPIO_PORT_R_WING_HOME_BTN, GPIO_PIN_R_WING_HOME_BTN));
000002  6a00              LDR      r0,[r0,#0x20]
000004  2120              MOVS     r1,#0x20
000006  4008              ANDS     r0,r0,r1
;;;488    }
000008  4770              BX       lr
;;;489    
                          ENDP

00000a  0000              DCW      0x0000
                  |L21.12|
                          DCD      0x40004140

                          AREA ||i.L_R_WING_CRC_Get||, CODE, READONLY, ALIGN=2

                  L_R_WING_CRC_Get PROC
;;;182    
;;;183    uint8_t L_R_WING_CRC_Get(uint8_t* data , uint16_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
;;;185    	uint16_t i = 0;
000002  2400              MOVS     r4,#0
000004  460d              MOV      r5,r1                 ;184
000006  4606              MOV      r6,r0                 ;184
;;;186    	uint32_t u32CalChecksum = 0;
;;;187    	
;;;188        CRC_Open(CRC_8, 0, 0x5A, CRC_WDATA_8);
000008  225a              MOVS     r2,#0x5a
00000a  4623              MOV      r3,r4
00000c  4621              MOV      r1,r4
00000e  0750              LSLS     r0,r2,#29
000010  f7fffffe          BL       CRC_Open
;;;189    
;;;190        /* Start to execute CRC-8 CPU operation */
;;;191        for(i = 0; i < len ; i++)
;;;192        {
;;;193            CRC_WRITE_DATA(data[i]);
000014  4807              LDR      r0,|L22.52|
000016  e003              B        |L22.32|
                  |L22.24|
000018  5d31              LDRB     r1,[r6,r4]
00001a  6041              STR      r1,[r0,#4]
00001c  1c64              ADDS     r4,r4,#1
00001e  b2a4              UXTH     r4,r4                 ;191
                  |L22.32|
000020  42ac              CMP      r4,r5                 ;191
000022  d3f9              BCC      |L22.24|
;;;194        }
;;;195    
;;;196        /* Get CRC-8 checksum value */
;;;197        u32CalChecksum = CRC_GetChecksum();
000024  f7fffffe          BL       CRC_GetChecksum
000028  4604              MOV      r4,r0
;;;198    
;;;199        /* Disable CRC function */
;;;200        CLK_DisableModuleClock(CRC_MODULE);
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       CLK_DisableModuleClock
;;;201    
;;;202    	return u32CalChecksum;
000030  b2e0              UXTB     r0,r4
;;;203    }
000032  bd70              POP      {r4-r6,pc}
;;;204    
                          ENDP

                  |L22.52|
                          DCD      0x40031000

                          AREA ||i.L_R_WING_CRC_HW_Init||, CODE, READONLY, ALIGN=1

                  L_R_WING_CRC_HW_Init PROC
;;;204    
;;;205    void L_R_WING_CRC_HW_Init(void)	//CRC-8
000000  b510              PUSH     {r4,lr}
;;;206    {
;;;207    	CLK_EnableModuleClock(CRC_MODULE);
000002  2007              MOVS     r0,#7
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;208    }
000008  bd10              POP      {r4,pc}
;;;209    
                          ENDP


                          AREA ||i.L_R_WING_ClearButtonStatus||, CODE, READONLY, ALIGN=2

                  L_R_WING_ClearButtonStatus PROC
;;;209    
;;;210    void L_R_WING_ClearButtonStatus(void)
000000  4903              LDR      r1,|L24.16|
;;;211    {
;;;212    	#if defined (L_WING_CONTROL)
;;;213    
;;;214    	clr_DOWN_BTN;
;;;215    	clr_RIGHT_BTN;
000002  2281              MOVS     r2,#0x81
000004  78c8              LDRB     r0,[r1,#3]            ;214  ; ButtonStatus
000006  0840              LSRS     r0,r0,#1              ;214
000008  0040              LSLS     r0,r0,#1              ;214
00000a  4010              ANDS     r0,r0,r2
;;;216    	clr_LEFT_BTN;
;;;217    	clr_UP_BTN;
;;;218    
;;;219    	#elif defined (R_WING_CONTROL)
;;;220    
;;;221    	clr_A_BTN; 
;;;222    	clr_B_BTN;
;;;223    	clr_X_BTN;
;;;224    	clr_Y_BTN;
;;;225    	clr_HOME_BTN;
;;;226    
;;;227    	#endif
;;;228    
;;;229    	clr_L1_R1_BTN;
;;;230    	clr_VIEW_MENU_BACK_START_BTN;
;;;231    	clr_THUMB_L_R_BTN;
00000c  70c8              STRB     r0,[r1,#3]
;;;232    
;;;233    }
00000e  4770              BX       lr
;;;234    
                          ENDP

                  |L24.16|
                          DCD      ||.data||

                          AREA ||i.L_R_WING_ClearINPacketBuffer||, CODE, READONLY, ALIGN=2

                  L_R_WING_ClearINPacketBuffer PROC
;;;244    
;;;245    void L_R_WING_ClearINPacketBuffer(void)
000000  2000              MOVS     r0,#0
;;;246    {
;;;247    	uint8_t i = 0;
;;;248    
;;;249    	for (i = 0; i<IN_PACKSET_SIZE ; i++)
;;;250    	{
;;;251    		Buffer_IN_packet[i] = 0x00;
000002  4a04              LDR      r2,|L25.20|
000004  4601              MOV      r1,r0                 ;247
                  |L25.6|
000006  5411              STRB     r1,[r2,r0]
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0                 ;249
00000c  2809              CMP      r0,#9                 ;249
00000e  d3fa              BCC      |L25.6|
;;;252    	}
;;;253    }
000010  4770              BX       lr
;;;254    
                          ENDP

000012  0000              DCW      0x0000
                  |L25.20|
                          DCD      ||.bss||+0x22

                          AREA ||i.L_R_WING_ClearOutPacketBuffer||, CODE, READONLY, ALIGN=2

                  L_R_WING_ClearOutPacketBuffer PROC
;;;234    
;;;235    void L_R_WING_ClearOutPacketBuffer(void)
000000  2000              MOVS     r0,#0
;;;236    {
;;;237    	uint8_t i = 0;
;;;238    
;;;239    	for (i = 0; i<OUT_PACKSET_SIZE ; i++)
;;;240    	{
;;;241    		Buffer_OUT_packet[i] = 0x00;
000002  4a04              LDR      r2,|L26.20|
000004  4601              MOV      r1,r0                 ;237
                  |L26.6|
000006  5411              STRB     r1,[r2,r0]
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0                 ;239
00000c  2806              CMP      r0,#6                 ;239
00000e  d3fa              BCC      |L26.6|
;;;242    	}
;;;243    }
000010  4770              BX       lr
;;;244    
                          ENDP

000012  0000              DCW      0x0000
                  |L26.20|
                          DCD      ||.data||+0x1c

                          AREA ||i.L_R_WING_Flow_ButtonState||, CODE, READONLY, ALIGN=2

                  L_R_WING_Flow_ButtonState PROC
;;;1095   
;;;1096   uint8_t L_R_WING_Flow_ButtonState(void)
000000  4802              LDR      r0,|L27.12|
;;;1097   {
;;;1098   	if (ButtonStatus != 0x00)
000002  78c0              LDRB     r0,[r0,#3]  ; ButtonStatus
000004  2800              CMP      r0,#0
000006  d000              BEQ      |L27.10|
;;;1099   	{		
;;;1100   		return TRUE;
000008  2001              MOVS     r0,#1
                  |L27.10|
;;;1101   	}	
;;;1102   
;;;1103   	return FALSE;	
;;;1104   }
00000a  4770              BX       lr
;;;1105   
                          ENDP

                  |L27.12|
                          DCD      ||.data||

                          AREA ||i.L_R_WING_Flow_GetLightingDuty||, CODE, READONLY, ALIGN=1

                  L_R_WING_Flow_GetLightingDuty PROC
;;;955    
;;;956    void L_R_WING_Flow_GetLightingDuty(uint8_t* R ,uint8_t* G ,uint8_t* B)
000000  b530              PUSH     {r4,r5,lr}
;;;957    {
;;;958    	uint8_t DATA_R = 0 , DATA_G = 0 , DATA_B = 0;
000002  2400              MOVS     r4,#0
;;;959    
;;;960    	/*
;;;961    		get R , G , B from I2C (CONTOLLER)
;;;962    	*/
;;;963    		
;;;964    	*R = DATA_R ;
000004  7004              STRB     r4,[r0,#0]
;;;965    	*G = DATA_G ;
000006  700c              STRB     r4,[r1,#0]
;;;966    	*B = DATA_B ;	
000008  7014              STRB     r4,[r2,#0]
;;;967    }
00000a  bd30              POP      {r4,r5,pc}
;;;968    
                          ENDP


                          AREA ||i.L_R_WING_Flow_GetMotorDuty||, CODE, READONLY, ALIGN=1

                  L_R_WING_Flow_GetMotorDuty PROC
;;;981    
;;;982    uint8_t L_R_WING_Flow_GetMotorDuty(void)
000000  2049              MOVS     r0,#0x49
;;;983    {
;;;984    	uint8_t duty = 73;
;;;985    
;;;986    	/*
;;;987    		get duty from I2C (CONTOLLER)
;;;988    	*/
;;;989    	
;;;990    	return duty;
;;;991    }
000002  4770              BX       lr
;;;992    
                          ENDP


                          AREA ||i.L_R_WING_Flow_IN_Packet_ReportTo_Master||, CODE, READONLY, ALIGN=2

                  L_R_WING_Flow_IN_Packet_ReportTo_Master PROC
;;;1120   
;;;1121   void L_R_WING_Flow_IN_Packet_ReportTo_Master(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1122   {
;;;1123   	uint16_t Data_X = 0;
000002  2600              MOVS     r6,#0
000004  4668              MOV      r0,sp
000006  8006              STRH     r6,[r0,#0]
;;;1124   	uint16_t Data_Y = 0;
000008  8086              STRH     r6,[r0,#4]
;;;1125   	uint16_t trigger_level = 0;
00000a  8106              STRH     r6,[r0,#8]
;;;1126   	
;;;1127   	_EventTrigger_INPacketToMaster_Set(L_R_WING_Flow_StickAxis(&Data_X , &Data_Y));
00000c  a901              ADD      r1,sp,#4
00000e  f7fffffe          BL       L_R_WING_Flow_StickAxis
000012  4d18              LDR      r5,|L30.116|
000014  7068              STRB     r0,[r5,#1]
;;;1128   	_EventTrigger_INPacketToMaster_Set(L_R_WING_Flow_ButtonState());
000016  f7fffffe          BL       L_R_WING_Flow_ButtonState
00001a  7068              STRB     r0,[r5,#1]
;;;1129   	_EventTrigger_INPacketToMaster_Set(L_R_WING_Flow_TriggerButtonState(&trigger_level));		
00001c  a802              ADD      r0,sp,#8
00001e  f7fffffe          BL       L_R_WING_Flow_TriggerButtonState
000022  7068              STRB     r0,[r5,#1]
;;;1130   
;;;1131   	if (_Is_EventTrigger_INPacketToMaster_Enable())
000024  2800              CMP      r0,#0
000026  d023              BEQ      |L30.112|
;;;1132   	{
;;;1133   		_EventTrigger_INPacketToMaster_Set(DISABLE);
000028  2000              MOVS     r0,#0
00002a  7068              STRB     r0,[r5,#1]
;;;1134   
;;;1135   		L_R_WING_GPIO_INT_L_R_Set(TRUE);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       L_R_WING_GPIO_INT_L_R_Set
;;;1136   
;;;1137   		/* Update Trigger/Joystick statusInto DATA pipe */	
;;;1138   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_FLAG] = GET_PERIPHERAL_STATE;
000032  4c11              LDR      r4,|L30.120|
000034  7026              STRB     r6,[r4,#0]
;;;1139   
;;;1140   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_BUTTON] = ButtonStatus;
000036  78e8              LDRB     r0,[r5,#3]  ; ButtonStatus
000038  7060              STRB     r0,[r4,#1]
;;;1141   
;;;1142   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_TRIGGER_LEVEL_HIGH] = HIBYTE(trigger_level);
00003a  4668              MOV      r0,sp
00003c  8900              LDRH     r0,[r0,#8]
00003e  0a01              LSRS     r1,r0,#8
000040  70a1              STRB     r1,[r4,#2]
;;;1143   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_TRIGGER_LEVEL_LOW] = LOBYTE(trigger_level);
000042  70e0              STRB     r0,[r4,#3]
;;;1144   		
;;;1145   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_STICK_X_HIGH] = HIBYTE(Data_X);
000044  4668              MOV      r0,sp
000046  8800              LDRH     r0,[r0,#0]
000048  0a01              LSRS     r1,r0,#8
00004a  7121              STRB     r1,[r4,#4]
;;;1146   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_STICK_X_LOW] = LOBYTE(Data_X);
00004c  7160              STRB     r0,[r4,#5]
;;;1147   
;;;1148   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_STICK_Y_HIGH] = HIBYTE(Data_Y);
00004e  4668              MOV      r0,sp
000050  8880              LDRH     r0,[r0,#4]
000052  0a01              LSRS     r1,r0,#8
000054  71a1              STRB     r1,[r4,#6]
;;;1149   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_STICK_Y_LOW] = LOBYTE(Data_Y);	
000056  71e0              STRB     r0,[r4,#7]
;;;1150   
;;;1151   		// report I2C data
;;;1152   		Buffer_IN_packet[GET_PERIPHERAL_STATE_INDEX_CHECKSUM] = L_R_WING_CRC_Get(Buffer_IN_packet,8);
000058  2108              MOVS     r1,#8
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       L_R_WING_CRC_Get
000060  7220              STRB     r0,[r4,#8]
;;;1153   
;;;1154   		// TODO: I2C slave , send data to master
;;;1155   
;;;1156   		// reset buffer , for next data storage
;;;1157   		L_R_WING_ClearINPacketBuffer();
000062  f7fffffe          BL       L_R_WING_ClearINPacketBuffer
;;;1158   		L_R_WING_ClearButtonStatus();
000066  f7fffffe          BL       L_R_WING_ClearButtonStatus
;;;1159   
;;;1160   		//close INT
;;;1161   		L_R_WING_GPIO_INT_L_R_Set(FALSE);
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       L_R_WING_GPIO_INT_L_R_Set
                  |L30.112|
;;;1162   	}
;;;1163   }
000070  bdfe              POP      {r1-r7,pc}
;;;1164   
                          ENDP

000072  0000              DCW      0x0000
                  |L30.116|
                          DCD      ||.data||
                  |L30.120|
                          DCD      ||.bss||+0x22

                          AREA ||i.L_R_WING_Flow_LightingEvent||, CODE, READONLY, ALIGN=1

                  L_R_WING_Flow_LightingEvent PROC
;;;968    
;;;969    void L_R_WING_Flow_LightingEvent(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;970    {
;;;971    	uint8_t DATA_R = 0 , DATA_G = 0 , DATA_B = 0;
000002  2000              MOVS     r0,#0
000004  466b              MOV      r3,sp
000006  7218              STRB     r0,[r3,#8]
000008  7118              STRB     r0,[r3,#4]
00000a  7018              STRB     r0,[r3,#0]
;;;972    
;;;973    	/*
;;;974    		if receive I2C from master , set LED duty
;;;975    	*/
;;;976    	
;;;977    	L_R_WING_Flow_GetLightingDuty(&DATA_R,&DATA_G,&DATA_B);
00000c  466a              MOV      r2,sp
00000e  a901              ADD      r1,sp,#4
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       L_R_WING_Flow_GetLightingDuty
;;;978    	L_R_WING_RING_LED_PWM_Set(DATA_R,DATA_G,DATA_B);
000016  466b              MOV      r3,sp
000018  781a              LDRB     r2,[r3,#0]
00001a  7919              LDRB     r1,[r3,#4]
00001c  7a18              LDRB     r0,[r3,#8]
00001e  f7fffffe          BL       L_R_WING_RING_LED_PWM_Set
;;;979    }
000022  bd0e              POP      {r1-r3,pc}
;;;980    
                          ENDP


                          AREA ||i.L_R_WING_Flow_MotorEvent||, CODE, READONLY, ALIGN=1

                  L_R_WING_Flow_MotorEvent PROC
;;;992    
;;;993    void L_R_WING_Flow_MotorEvent(void)
000000  b510              PUSH     {r4,lr}
000002  2449              MOVS     r4,#0x49
;;;994    {
;;;995    	uint8_t duty = 0;
;;;996    
;;;997    	/*
;;;998    		if receive I2C from master , set motor duty
;;;999    	*/
;;;1000   	
;;;1001   	duty = L_R_WING_Flow_GetMotorDuty();
;;;1002   	
;;;1003   	L_R_WING_MOTOR_HIN_PWM_Set(duty);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       L_R_WING_MOTOR_HIN_PWM_Set
;;;1004   	L_R_WING_MOTOR_LIN_PWM_Set(duty);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       L_R_WING_MOTOR_LIN_PWM_Set
;;;1005   }
000010  bd10              POP      {r4,pc}
;;;1006   
                          ENDP


                          AREA ||i.L_R_WING_Flow_Out_Packet_From_Master||, CODE, READONLY, ALIGN=2

                  L_R_WING_Flow_Out_Packet_From_Master PROC
;;;1105   
;;;1106   void L_R_WING_Flow_Out_Packet_From_Master(void)
000000  b510              PUSH     {r4,lr}
000002  4c06              LDR      r4,|L33.28|
000004  78a0              LDRB     r0,[r4,#2]  ; EventFlag_OUTPacketFromMaster
;;;1107   {
;;;1108   	if (_EventTrigger_OUTPacketFromMaster_Get() == SET_RUMBLE_MOTOR)
000006  2800              CMP      r0,#0
000008  d101              BNE      |L33.14|
;;;1109   	{
;;;1110   		L_R_WING_Flow_MotorEvent();
00000a  f7fffffe          BL       L_R_WING_Flow_MotorEvent
                  |L33.14|
00000e  78a0              LDRB     r0,[r4,#2]  ; EventFlag_OUTPacketFromMaster
;;;1111   	}
;;;1112   
;;;1113   	if (_EventTrigger_OUTPacketFromMaster_Get() == SET_LIGHTING_EFFECT)
000010  2802              CMP      r0,#2
000012  d101              BNE      |L33.24|
;;;1114   	{
;;;1115   		L_R_WING_Flow_LightingEvent();
000014  f7fffffe          BL       L_R_WING_Flow_LightingEvent
                  |L33.24|
;;;1116   	}
;;;1117   
;;;1118   	
;;;1119   }
000018  bd10              POP      {r4,pc}
;;;1120   
                          ENDP

00001a  0000              DCW      0x0000
                  |L33.28|
                          DCD      ||.data||

                          AREA ||i.L_R_WING_Flow_StickAxis||, CODE, READONLY, ALIGN=2

                  L_R_WING_Flow_StickAxis PROC
;;;1068   
;;;1069   uint8_t L_R_WING_Flow_StickAxis(uint16_t* X , uint16_t* Y)
000000  b570              PUSH     {r4-r6,lr}
;;;1070   {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;1071   	uint16_t Data_X = 0;
;;;1072   	uint16_t Data_Y = 0;
;;;1073   
;;;1074   	static uint16_t Tepm_X = 0;
;;;1075   	static uint16_t Tepm_Y = 0;
;;;1076   	
;;;1077   	/* Polling ADC */
;;;1078   	Data_X = L_R_WING_THUMB_X_GetADC();
000006  f7fffffe          BL       L_R_WING_THUMB_X_GetADC
00000a  b284              UXTH     r4,r0
;;;1079   	Data_Y = L_R_WING_THUMB_Y_GetADC();
00000c  f7fffffe          BL       L_R_WING_THUMB_Y_GetADC
000010  b282              UXTH     r2,r0
;;;1080   
;;;1081   	if ((Data_X != Tepm_X) || (Data_Y != Tepm_Y))
000012  4807              LDR      r0,|L34.48|
000014  8901              LDRH     r1,[r0,#8]  ; Tepm_X
000016  428c              CMP      r4,r1
000018  d102              BNE      |L34.32|
00001a  8941              LDRH     r1,[r0,#0xa]  ; Tepm_Y
00001c  428a              CMP      r2,r1
00001e  d003              BEQ      |L34.40|
                  |L34.32|
;;;1082   	{
;;;1083   		*X = Data_X;
000020  8034              STRH     r4,[r6,#0]
;;;1084   		*Y = Data_Y;		
000022  802a              STRH     r2,[r5,#0]
;;;1085   		return TRUE;
000024  2001              MOVS     r0,#1
;;;1086   	}
;;;1087   
;;;1088   
;;;1089   	Tepm_X = Data_X;
;;;1090   	Tepm_Y = Data_Y;
;;;1091   	
;;;1092   	return FALSE;
;;;1093   
;;;1094   }
000026  bd70              POP      {r4-r6,pc}
                  |L34.40|
000028  8104              STRH     r4,[r0,#8]            ;1089
00002a  8142              STRH     r2,[r0,#0xa]          ;1090
00002c  2000              MOVS     r0,#0                 ;1092
00002e  bd70              POP      {r4-r6,pc}
;;;1095   
                          ENDP

                  |L34.48|
                          DCD      ||.data||

                          AREA ||i.L_R_WING_Flow_TriggerButtonState||, CODE, READONLY, ALIGN=2

                  L_R_WING_Flow_TriggerButtonState PROC
;;;1006   
;;;1007   uint8_t L_R_WING_Flow_TriggerButtonState(uint16_t* level)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1008   {
000002  b085              SUB      sp,sp,#0x14
;;;1009   
;;;1010   /*
;;;1011   	addr : 0x28
;;;1012   	31:24 	X Axis MSBs MSBs of the register proportional to the field strength in the X direction.
;;;1013   	23:16 	Y Axis MSBs MSBs of the register proportional to the field strength in the Y direction.
;;;1014   	15:8 	Z Axis MSBs MSBs of the register proportional to the field strength in the Z direction. 
;;;1015   
;;;1016   	addr : 0x29
;;;1017   	19:16 	X Axis LSBs LSBs of the register proportional to the field-strength in the X direction.
;;;1018   	15:12 	Y Axis LSBs LSBs of the register proportional to the field-strength in the Y direction.
;;;1019   	11:8 	Z Axis LSBs LSBs of the register proportional to the field-strength in the Z direction.
;;;1020   
;;;1021   	Each Axis is 12 bit DATA , MSB (8BIT) | LSB (4BIT)
;;;1022   	
;;;1023   */
;;;1024   
;;;1025   	uint8_t Data[8] = {0};
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;1026   	uint8_t Temp[8] = {0};
000008  9001              STR      r0,[sp,#4]
00000a  9002              STR      r0,[sp,#8]
;;;1027   	uint8_t Address_MSB = 0x28;	
;;;1028   	uint8_t Address_LSB = 0x29;	//FULL LOOP MODE
;;;1029   	uint16_t X_Axis = 0,Y_Axis = 0 , Z_Axis = 0;
;;;1030   	
;;;1031   	uint16_t Trigger_level = 0;	
;;;1032   	static uint16_t Temp_trigger_level = 0;	
;;;1033   	
;;;1034   	L_R_WING_HALL_SENSOR_I2C1_Read(I2C_ADDRESS_L_R_WING_HALL_SENSOR_I2C,
00000c  9003              STR      r0,[sp,#0xc]
00000e  2128              MOVS     r1,#0x28              ;1027
000010  2729              MOVS     r7,#0x29              ;1028
000012  ab02              ADD      r3,sp,#8
000014  2204              MOVS     r2,#4
000016  2060              MOVS     r0,#0x60
000018  f7fffffe          BL       L_R_WING_HALL_SENSOR_I2C1_Read
;;;1035   		Address_MSB,
;;;1036   		4,
;;;1037   		Temp);
;;;1038   	Data[0] = Temp[0];	//X Axis MSBs , reverse 1 byte for LSB
00001c  466a              MOV      r2,sp
00001e  7a16              LDRB     r6,[r2,#8]
000020  7016              STRB     r6,[r2,#0]
;;;1039   	Data[2] = Temp[1];	//Y Axis MSBs , reverse 1 byte for LSB
000022  7a55              LDRB     r5,[r2,#9]
000024  7095              STRB     r5,[r2,#2]
;;;1040   	Data[4] = Temp[2];	//Z Axis MSBs , reverse 1 byte for LSB	
000026  7a94              LDRB     r4,[r2,#0xa]
000028  7114              STRB     r4,[r2,#4]
;;;1041   	Data[6] = Temp[3];	//Temperature MSBs by pass ?
00002a  7ad0              LDRB     r0,[r2,#0xb]
00002c  7190              STRB     r0,[r2,#6]
;;;1042   	
;;;1043   	L_R_WING_HALL_SENSOR_I2C1_Read(I2C_ADDRESS_L_R_WING_HALL_SENSOR_I2C,
00002e  ab02              ADD      r3,sp,#8
000030  2204              MOVS     r2,#4
000032  4639              MOV      r1,r7
000034  2060              MOVS     r0,#0x60
000036  f7fffffe          BL       L_R_WING_HALL_SENSOR_I2C1_Read
;;;1044   		Address_LSB,
;;;1045   		4,
;;;1046   		Temp);
;;;1047   
;;;1048   	Data[1] = Temp[1] & 0x0F ;		//X LSB
00003a  466a              MOV      r2,sp
00003c  7a50              LDRB     r0,[r2,#9]
00003e  0703              LSLS     r3,r0,#28
000040  0f1b              LSRS     r3,r3,#28
000042  7053              STRB     r3,[r2,#1]
;;;1049   	Data[3] = (Temp[2] & 0xF0)>>4 ;	//Y LSB		
000044  7a91              LDRB     r1,[r2,#0xa]
000046  0908              LSRS     r0,r1,#4
;;;1050   	Data[5] = Temp[2] & 0x0F ;		//Z LSB
000048  0709              LSLS     r1,r1,#28
00004a  70d0              STRB     r0,[r2,#3]            ;1049
00004c  0f09              LSRS     r1,r1,#28
00004e  7151              STRB     r1,[r2,#5]
;;;1051   
;;;1052   	X_Axis = Data[0] <<4 | Data[1];
000050  0132              LSLS     r2,r6,#4
000052  431a              ORRS     r2,r2,r3
;;;1053   	Y_Axis = Data[2] <<4 | Data[3];
000054  012b              LSLS     r3,r5,#4
000056  4303              ORRS     r3,r3,r0
;;;1054   	Z_Axis = Data[4] <<4 | Data[5];
000058  0120              LSLS     r0,r4,#4
00005a  4308              ORRS     r0,r0,r1
;;;1055   
;;;1056   	// TODO: how to combine X , Y , Z to Trigger_level ?
;;;1057   	Trigger_level = X_Axis + Y_Axis + Z_Axis ;	//temporary , not actual formula
00005c  18d1              ADDS     r1,r2,r3
00005e  1808              ADDS     r0,r1,r0
;;;1058   
;;;1059   	if (Trigger_level != Temp_trigger_level)
000060  4904              LDR      r1,|L35.116|
000062  88ca              LDRH     r2,[r1,#6]  ; Temp_trigger_level
000064  4290              CMP      r0,r2
000066  d002              BEQ      |L35.110|
;;;1060   	{		
;;;1061   		return TRUE;
000068  2001              MOVS     r0,#1
                  |L35.106|
;;;1062   	}	
;;;1063   
;;;1064   	Temp_trigger_level = Trigger_level;
;;;1065   
;;;1066   	return FALSE;	
;;;1067   }
00006a  b005              ADD      sp,sp,#0x14
00006c  bdf0              POP      {r4-r7,pc}
                  |L35.110|
00006e  80c8              STRH     r0,[r1,#6]            ;1064
000070  2000              MOVS     r0,#0                 ;1066
000072  e7fa              B        |L35.106|
;;;1068   
                          ENDP

                  |L35.116|
                          DCD      ||.data||

                          AREA ||i.L_R_WING_Function_Init||, CODE, READONLY, ALIGN=1

                  L_R_WING_Function_Init PROC
;;;1212   
;;;1213   void L_R_WING_Function_Init(void)
000000  b510              PUSH     {r4,lr}
;;;1214   {
;;;1215   
;;;1216   	L_R_WING_SLAVE_I2C0_Init();
;;;1217   	L_R_WING_MOTOR_PWM_Init();
000002  f7fffffe          BL       L_R_WING_MOTOR_PWM_Init
;;;1218   
;;;1219   	L_R_WING_THUMB_ADC_Init();	
000006  f7fffffe          BL       L_R_WING_THUMB_ADC_Init
;;;1220   	L_R_WING_GPIO_Input_Init();
00000a  f7fffffe          BL       L_R_WING_GPIO_Input_Init
;;;1221   
;;;1222   	L_R_WING_GPIO_Out_Init();
00000e  f7fffffe          BL       L_R_WING_GPIO_Out_Init
;;;1223   
;;;1224   	L_R_WING_RING_LED_PWM_Init();
000012  f7fffffe          BL       L_R_WING_RING_LED_PWM_Init
;;;1225   
;;;1226   	L_R_WING_HALL_SENSOR_I2C1_Init();
000016  f7fffffe          BL       L_R_WING_HALL_SENSOR_I2C1_Init
;;;1227   
;;;1228   
;;;1229   	L_R_WING_TIMER3_Init();
00001a  f7fffffe          BL       L_R_WING_TIMER3_Init
;;;1230   
;;;1231   }
00001e  bd10              POP      {r4,pc}
;;;1232   
                          ENDP


                          AREA ||i.L_R_WING_GPIO_INT_L_R_Set||, CODE, READONLY, ALIGN=2

                  L_R_WING_GPIO_INT_L_R_Set PROC
;;;317    
;;;318    void L_R_WING_GPIO_INT_L_R_Set(uint8_t in)
000000  4902              LDR      r1,|L37.12|
;;;319    {
;;;320    	if (in == 1)
000002  2801              CMP      r0,#1
000004  d000              BEQ      |L37.8|
;;;321    	{
;;;322    		GPIO_PIN_DATA_L_R_WING_INT_L_R = 1;
;;;323    	}
;;;324    	else
;;;325    	{
;;;326    		GPIO_PIN_DATA_L_R_WING_INT_L_R = 0;	
000006  2000              MOVS     r0,#0
                  |L37.8|
000008  63c8              STR      r0,[r1,#0x3c]         ;322
;;;327    	}
;;;328    }
00000a  4770              BX       lr
;;;329    
                          ENDP

                  |L37.12|
                          DCD      0x40004800

                          AREA ||i.L_R_WING_GPIO_Input_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_GPIO_Input_Init PROC
;;;354    
;;;355    void L_R_WING_GPIO_Input_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;356    {
;;;357        GPIO_SetMode(GPIO_PORT_L_R_WING_UP_X_BTN, GPIO_PIN_L_R_WING_UP_X_BTN, GPIO_MODE_L_R_WING_UP_X_BTN);
000002  4c3d              LDR      r4,|L38.248|
000004  2200              MOVS     r2,#0
000006  2104              MOVS     r1,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;358        GPIO_SetMode(GPIO_PORT_L_R_WING_DOWN_Y_BTN, GPIO_PIN_L_R_WING_DOWN_Y_BTN, GPIO_MODE_L_R_WING_DOWN_Y_BTN);
00000e  2200              MOVS     r2,#0
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;359        GPIO_SetMode(GPIO_PORT_L_R_WING_RIGHT_A_BTN, GPIO_PIN_L_R_WING_RIGHT_A_BTN, GPIO_MODE_L_R_WING_RIGHT_A_BTN);
000018  2200              MOVS     r2,#0
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       GPIO_SetMode
;;;360        GPIO_SetMode(GPIO_PORT_L_R_WING_LEFT_B_BTN, GPIO_PIN_L_R_WING_LEFT_B_BTN, GPIO_MODE_L_R_WING_LEFT_B_BTN);
000022  2200              MOVS     r2,#0
000024  2102              MOVS     r1,#2
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GPIO_SetMode
;;;361    	
;;;362        GPIO_SetMode(GPIO_PORT_L_R_WING_VIEW_MENU_BTN, GPIO_PIN_L_R_WING_VIEW_MENU_BTN, GPIO_MODE_L_R_WING_VIEW_MENU_BTN);	
00002c  4d33              LDR      r5,|L38.252|
00002e  13e6              ASRS     r6,r4,#15
000030  2200              MOVS     r2,#0
000032  4631              MOV      r1,r6
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       GPIO_SetMode
;;;363        GPIO_SetMode(GPIO_PORT_L_R_WING_L1_R1_BTN, GPIO_PIN_L_R_WING_L1_R1_BTN, GPIO_MODE_L_R_WING_L1_R1_BTN);
00003a  2200              MOVS     r2,#0
00003c  2104              MOVS     r1,#4
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       GPIO_SetMode
;;;364        GPIO_SetMode(GPIO_PORT_L_R_WING_THUMB_BTN, GPIO_PIN_L_R_WING_THUMB_BTN, GPIO_MODE_L_R_WING_THUMB_BTN);	
000044  2200              MOVS     r2,#0
000046  2108              MOVS     r1,#8
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       GPIO_SetMode
;;;365        GPIO_SetMode(GPIO_PORT_L_R_WING_HALL_SENSOR_INT, GPIO_PIN_L_R_WING_HALL_SENSOR_INT, GPIO_MODE_L_R_WING_HALL_SENSOR_INT);		
00004e  1427              ASRS     r7,r4,#16
000050  2200              MOVS     r2,#0
000052  4639              MOV      r1,r7
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       GPIO_SetMode
;;;366    
;;;367    	#if defined (R_WING_CONTROL)
;;;368      	GPIO_SetMode(GPIO_PORT_R_WING_HOME_BTN, GPIO_PIN_R_WING_HOME_BTN, GPIO_MODE_R_WING_HOME_BTN);	
;;;369    	#endif
;;;370    
;;;371    	GPIO_EnableInt(GPIO_PORT_L_R_WING_UP_X_BTN, GPIO_PIN_L_R_WING_UP_X_BTN, GPIO_INT_FALLING);
00005a  2201              MOVS     r2,#1
00005c  2104              MOVS     r1,#4
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       GPIO_EnableInt
;;;372    	GPIO_EnableInt(GPIO_PORT_L_R_WING_DOWN_Y_BTN, GPIO_PIN_L_R_WING_DOWN_Y_BTN, GPIO_INT_FALLING);
000064  2201              MOVS     r2,#1
000066  2108              MOVS     r1,#8
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       GPIO_EnableInt
;;;373    	GPIO_EnableInt(GPIO_PORT_L_R_WING_RIGHT_A_BTN, GPIO_PIN_L_R_WING_RIGHT_A_BTN, GPIO_INT_FALLING);
00006e  2201              MOVS     r2,#1
000070  4611              MOV      r1,r2
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       GPIO_EnableInt
;;;374    	GPIO_EnableInt(GPIO_PORT_L_R_WING_LEFT_B_BTN, GPIO_PIN_L_R_WING_LEFT_B_BTN, GPIO_INT_FALLING);
000078  2201              MOVS     r2,#1
00007a  2102              MOVS     r1,#2
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       GPIO_EnableInt
;;;375    	
;;;376    	GPIO_EnableInt(GPIO_PORT_L_R_WING_VIEW_MENU_BTN, GPIO_PIN_L_R_WING_VIEW_MENU_BTN, GPIO_INT_FALLING);
000082  2201              MOVS     r2,#1
000084  4631              MOV      r1,r6
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       GPIO_EnableInt
;;;377    	GPIO_EnableInt(GPIO_PORT_L_R_WING_L1_R1_BTN, GPIO_PIN_L_R_WING_L1_R1_BTN, GPIO_INT_FALLING);
00008c  2201              MOVS     r2,#1
00008e  2104              MOVS     r1,#4
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       GPIO_EnableInt
;;;378    	GPIO_EnableInt(GPIO_PORT_L_R_WING_THUMB_BTN, GPIO_PIN_L_R_WING_THUMB_BTN, GPIO_INT_FALLING);
000096  2201              MOVS     r2,#1
000098  2108              MOVS     r1,#8
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       GPIO_EnableInt
;;;379    	GPIO_EnableInt(GPIO_PORT_L_R_WING_HALL_SENSOR_INT, GPIO_PIN_L_R_WING_HALL_SENSOR_INT, GPIO_INT_FALLING);
0000a0  2201              MOVS     r2,#1
0000a2  4639              MOV      r1,r7
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       GPIO_EnableInt
;;;380    
;;;381    	#if defined (R_WING_CONTROL)
;;;382      	GPIO_EnableInt(GPIO_PORT_R_WING_HOME_BTN, GPIO_PIN_R_WING_HOME_BTN, GPIO_INT_FALLING);	
;;;383    	#endif
;;;384    
;;;385        NVIC_EnableIRQ(GPIO_PAPB_IRQn);
0000aa  2004              MOVS     r0,#4
0000ac  f7fffffe          BL       NVIC_EnableIRQ
;;;386        NVIC_EnableIRQ(GPIO_PCPDPEPF_IRQn);	
0000b0  2005              MOVS     r0,#5
0000b2  f7fffffe          BL       NVIC_EnableIRQ
;;;387    
;;;388        GPIO_SET_DEBOUNCE_TIME(GPIO_DBCTL_DBCLKSRC_LIRC, GPIO_DBCTL_DBCLKSEL_1024);
0000b6  4912              LDR      r1,|L38.256|
0000b8  203a              MOVS     r0,#0x3a
0000ba  6008              STR      r0,[r1,#0]
;;;389        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_UP_X_BTN, GPIO_PIN_L_R_WING_UP_X_BTN);
0000bc  6960              LDR      r0,[r4,#0x14]
0000be  2204              MOVS     r2,#4
0000c0  4310              ORRS     r0,r0,r2
0000c2  6160              STR      r0,[r4,#0x14]
;;;390        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_DOWN_Y_BTN, GPIO_PIN_L_R_WING_DOWN_Y_BTN);
0000c4  6961              LDR      r1,[r4,#0x14]
0000c6  2008              MOVS     r0,#8
0000c8  4301              ORRS     r1,r1,r0
0000ca  6161              STR      r1,[r4,#0x14]
;;;391        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_RIGHT_A_BTN, GPIO_PIN_L_R_WING_RIGHT_A_BTN);
0000cc  6961              LDR      r1,[r4,#0x14]
0000ce  2301              MOVS     r3,#1
0000d0  4319              ORRS     r1,r1,r3
0000d2  6161              STR      r1,[r4,#0x14]
;;;392        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_LEFT_B_BTN, GPIO_PIN_L_R_WING_LEFT_B_BTN);
0000d4  6961              LDR      r1,[r4,#0x14]
0000d6  2302              MOVS     r3,#2
0000d8  4319              ORRS     r1,r1,r3
0000da  6161              STR      r1,[r4,#0x14]
;;;393    	
;;;394        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_VIEW_MENU_BTN, GPIO_PIN_L_R_WING_VIEW_MENU_BTN);
0000dc  6969              LDR      r1,[r5,#0x14]
0000de  4331              ORRS     r1,r1,r6
0000e0  6169              STR      r1,[r5,#0x14]
;;;395        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_L1_R1_BTN, GPIO_PIN_L_R_WING_L1_R1_BTN);
0000e2  6969              LDR      r1,[r5,#0x14]
0000e4  4311              ORRS     r1,r1,r2
0000e6  6169              STR      r1,[r5,#0x14]
;;;396        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_THUMB_BTN, GPIO_PIN_L_R_WING_THUMB_BTN);
0000e8  6969              LDR      r1,[r5,#0x14]
0000ea  4301              ORRS     r1,r1,r0
0000ec  6169              STR      r1,[r5,#0x14]
;;;397        GPIO_ENABLE_DEBOUNCE(GPIO_PORT_L_R_WING_HALL_SENSOR_INT, GPIO_PIN_L_R_WING_HALL_SENSOR_INT);
0000ee  6960              LDR      r0,[r4,#0x14]
0000f0  4338              ORRS     r0,r0,r7
0000f2  6160              STR      r0,[r4,#0x14]
;;;398    
;;;399    	#if defined (R_WING_CONTROL)
;;;400      	GPIO_ENABLE_DEBOUNCE(GPIO_PORT_R_WING_HOME_BTN, GPIO_PIN_R_WING_HOME_BTN);	
;;;401    	#endif	
;;;402    	
;;;403    }
0000f4  bdf8              POP      {r3-r7,pc}
;;;404    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L38.248|
                          DCD      0x40004000
                  |L38.252|
                          DCD      0x40004140
                  |L38.256|
                          DCD      0x40004440

                          AREA ||i.L_R_WING_GPIO_MOTOR_SLEEP_Set||, CODE, READONLY, ALIGN=2

                  L_R_WING_GPIO_MOTOR_SLEEP_Set PROC
;;;329    
;;;330    void L_R_WING_GPIO_MOTOR_SLEEP_Set(uint8_t in)
000000  4902              LDR      r1,|L39.12|
;;;331    {
;;;332    	if (in == 1)
000002  2801              CMP      r0,#1
000004  d000              BEQ      |L39.8|
;;;333    	{
;;;334    		GPIO_PIN_DATA_L_R_WING_MOTOR_SLEEP = 1;
;;;335    	}
;;;336    	else
;;;337    	{
;;;338    		GPIO_PIN_DATA_L_R_WING_MOTOR_SLEEP = 0;	
000006  2000              MOVS     r0,#0
                  |L39.8|
000008  60c8              STR      r0,[r1,#0xc]          ;334
;;;339    	}	
;;;340    }
00000a  4770              BX       lr
;;;341    
                          ENDP

                  |L39.12|
                          DCD      0x40004840

                          AREA ||i.L_R_WING_GPIO_Out_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_GPIO_Out_Init PROC
;;;309    
;;;310    void L_R_WING_GPIO_Out_Init(void)
000000  b510              PUSH     {r4,lr}
;;;311    {
;;;312        GPIO_SetMode(GPIO_PORT_L_R_WING_INT_L_R, GPIO_PIN_L_R_WING_INT_L_R, GPIO_MODE_L_R_WING_INT_L_R);
000002  2201              MOVS     r2,#1
000004  03d1              LSLS     r1,r2,#15
000006  4808              LDR      r0,|L40.40|
000008  f7fffffe          BL       GPIO_SetMode
;;;313        GPIO_SetMode(GPIO_PORT_L_R_WING_MOTOR_SLEEP, GPIO_PIN_L_R_WING_MOTOR_SLEEP, GPIO_MODE_L_R_WING_MOTOR_SLEEP);	
00000c  4c06              LDR      r4,|L40.40|
00000e  2201              MOVS     r2,#1
000010  3440              ADDS     r4,r4,#0x40
000012  2108              MOVS     r1,#8
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       GPIO_SetMode
;;;314    
;;;315        GPIO_SetMode(GPIO_PORT_L_R_WING_THUMB_VDD, GPIO_PIN_L_R_WING_THUMB_VDD, GPIO_MODE_L_R_WING_THUMB_VDD);	
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       GPIO_SetMode
;;;316    }
000024  bd10              POP      {r4,pc}
;;;317    
                          ENDP

000026  0000              DCW      0x0000
                  |L40.40|
                          DCD      0x40004000

                          AREA ||i.L_R_WING_GPIO_THUMB_VDD_Set||, CODE, READONLY, ALIGN=2

                  L_R_WING_GPIO_THUMB_VDD_Set PROC
;;;341    
;;;342    void L_R_WING_GPIO_THUMB_VDD_Set(uint8_t in)
000000  4902              LDR      r1,|L41.12|
;;;343    {
;;;344    	if (in == 1)
000002  2801              CMP      r0,#1
000004  d000              BEQ      |L41.8|
;;;345    	{
;;;346    		GPIO_PIN_DATA_L_R_THUMB_VDD = 1;
;;;347    	}
;;;348    	else
;;;349    	{
;;;350    		GPIO_PIN_DATA_L_R_THUMB_VDD = 0;	
000006  2000              MOVS     r0,#0
                  |L41.8|
000008  6388              STR      r0,[r1,#0x38]         ;346
;;;351    	}	
;;;352    }
00000a  4770              BX       lr
;;;353    
                          ENDP

                  |L41.12|
                          DCD      0x40004840

                          AREA ||i.L_R_WING_HALL_SENSOR_I2C1_HW_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_HALL_SENSOR_I2C1_HW_Init PROC
;;;886    
;;;887    void L_R_WING_HALL_SENSOR_I2C1_HW_Init(void)	//PA12 : SCL , PA13 : SDA
000000  b510              PUSH     {r4,lr}
;;;888    {
;;;889        CLK_EnableModuleClock(MODULE_CLOCK_L_R_WING_HALL_SENSOR_I2C);
000002  4807              LDR      r0,|L42.32|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;890    
;;;891        /* Set I2C0 multi-function pins */
;;;892        SYS->GPC_MFPH = (SYS->GPC_MFPH & ~(MFP_MASK_L_R_WING_HALL_SENSOR_I2C_SCL | MFP_MASK_L_R_WING_HALL_SENSOR_I2C_SDA)) |
000008  4805              LDR      r0,|L42.32|
00000a  3037              ADDS     r0,r0,#0x37
00000c  6841              LDR      r1,[r0,#4]
00000e  22ff              MOVS     r2,#0xff
000010  0412              LSLS     r2,r2,#16
000012  4391              BICS     r1,r1,r2
000014  2211              MOVS     r2,#0x11
000016  0492              LSLS     r2,r2,#18
000018  1889              ADDS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;893                        (MFP_FUNC_L_R_WING_HALL_SENSOR_I2C_SDA | MFP_FUNC_L_R_WING_HALL_SENSOR_I2C_SCL);
;;;894    
;;;895    }
00001c  bd10              POP      {r4,pc}
;;;896    
                          ENDP

00001e  0000              DCW      0x0000
                  |L42.32|
                          DCD      0x40000009

                          AREA ||i.L_R_WING_HALL_SENSOR_I2C1_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_HALL_SENSOR_I2C1_Init PROC
;;;896    
;;;897    void L_R_WING_HALL_SENSOR_I2C1_Init(void)	//PA12 : SCL , PA13 : SDA
000000  b510              PUSH     {r4,lr}
;;;898    {
;;;899        /* Open I2C module and set bus clock */
;;;900        I2C_Open(I2C_BASE_L_R_WING_HALL_SENSOR_I2C, I2C_SPEED_L_R_WING_HALL_SENSOR_I2C);
000002  4c07              LDR      r4,|L43.32|
000004  4905              LDR      r1,|L43.28|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Open
;;;901    
;;;902        I2C_SetSlaveAddr(I2C_BASE_L_R_WING_HALL_SENSOR_I2C, 0, I2C_ADDRESS_L_R_WING_HALL_SENSOR_I2C, 0);
00000c  2300              MOVS     r3,#0
00000e  2260              MOVS     r2,#0x60
000010  4619              MOV      r1,r3
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_SetSlaveAddr
;;;903    }
000018  bd10              POP      {r4,pc}
;;;904    
                          ENDP

00001a  0000              DCW      0x0000
                  |L43.28|
                          DCD      0x000186a0
                  |L43.32|
                          DCD      0x40081000

                          AREA ||i.L_R_WING_HALL_SENSOR_I2C1_Read||, CODE, READONLY, ALIGN=2

                  L_R_WING_HALL_SENSOR_I2C1_Read PROC
;;;865    
;;;866    void L_R_WING_HALL_SENSOR_I2C1_Read(uint8_t DeviceAddr, 
000000  b508              PUSH     {r3,lr}
;;;867    								uint8_t RegisterAddr,
;;;868                                  	uint16_t NumByteToRead,
;;;869                                  	uint8_t* pBuffer)
;;;870    {
;;;871    	
;;;872    	I2C_ReadMultiBytesOneReg(I2C_BASE_L_R_WING_HALL_SENSOR_I2C, DeviceAddr, RegisterAddr, pBuffer, NumByteToRead);	
000002  9200              STR      r2,[sp,#0]
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  4801              LDR      r0,|L44.16|
00000a  f7fffffe          BL       I2C_ReadMultiBytesOneReg
;;;873    
;;;874    }
00000e  bd08              POP      {r3,pc}
;;;875    								
                          ENDP

                  |L44.16|
                          DCD      0x40081000

                          AREA ||i.L_R_WING_HALL_SENSOR_I2C1_Write||, CODE, READONLY, ALIGN=2

                  L_R_WING_HALL_SENSOR_I2C1_Write PROC
;;;875    								
;;;876    void L_R_WING_HALL_SENSOR_I2C1_Write(uint8_t DeviceAddr, 
000000  b508              PUSH     {r3,lr}
;;;877    								uint8_t RegisterAddr,
;;;878                                   	uint16_t NumByteToWrite,
;;;879                                   	uint8_t* pBuffer)
;;;880    {
;;;881    
;;;882    	I2C_WriteMultiBytesOneReg(I2C_BASE_L_R_WING_HALL_SENSOR_I2C, DeviceAddr, RegisterAddr, pBuffer, NumByteToWrite);	
000002  9200              STR      r2,[sp,#0]
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  4801              LDR      r0,|L45.16|
00000a  f7fffffe          BL       I2C_WriteMultiBytesOneReg
;;;883    
;;;884    }
00000e  bd08              POP      {r3,pc}
;;;885    
                          ENDP

                  |L45.16|
                          DCD      0x40081000

                          AREA ||i.L_R_WING_HW_Init||, CODE, READONLY, ALIGN=1

                  L_R_WING_HW_Init PROC
;;;1199   
;;;1200   void L_R_WING_HW_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2007              MOVS     r0,#7
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;1201   {
;;;1202   	L_R_WING_CRC_HW_Init();
;;;1203   	
;;;1204   	L_R_WING_SLAVE_I2C0_HW_Init();
000008  f7fffffe          BL       L_R_WING_SLAVE_I2C0_HW_Init
;;;1205   	L_R_WING_MOTOR_HW_Init();
00000c  f7fffffe          BL       L_R_WING_MOTOR_HW_Init
;;;1206   
;;;1207   	L_R_WING_THUMB_HW_Init();
000010  f7fffffe          BL       L_R_WING_THUMB_HW_Init
;;;1208   	L_R_WING_RING_LED_HW_Init();
000014  f7fffffe          BL       L_R_WING_RING_LED_HW_Init
;;;1209   
;;;1210   	L_R_WING_HALL_SENSOR_I2C1_HW_Init();
000018  f7fffffe          BL       L_R_WING_HALL_SENSOR_I2C1_HW_Init
;;;1211   }
00001c  bd10              POP      {r4,pc}
;;;1212   
                          ENDP


                          AREA ||i.L_R_WING_MOTOR_HIN_PWM_Set||, CODE, READONLY, ALIGN=2

                  L_R_WING_MOTOR_HIN_PWM_Set PROC
;;;830    
;;;831    void L_R_WING_MOTOR_HIN_PWM_Set(uint16_t duty)
000000  b510              PUSH     {r4,lr}
;;;832    {
;;;833    //	PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_CH_L_R_WING_MOTOR_HIN, PWM_FREQ_L_R_WING_MOTOR_HIN, duty);
;;;834    
;;;835        uint32_t u32NewCMR = 0;
;;;836    
;;;837        u32NewCMR = PWM_GET_CNR(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_CH_L_R_WING_MOTOR_HIN);
000002  4906              LDR      r1,|L47.28|
000004  6b09              LDR      r1,[r1,#0x30]
;;;838        u32NewCMR = u32NewCMR * (100-duty)/100;
000006  2264              MOVS     r2,#0x64
000008  1a10              SUBS     r0,r2,r0
00000a  4348              MULS     r0,r1,r0
00000c  4611              MOV      r1,r2
00000e  f7fffffe          BL       __aeabi_uidivmod
;;;839    	PWM_SET_CMR(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_CH_L_R_WING_MOTOR_HIN, u32NewCMR);
000012  4902              LDR      r1,|L47.28|
000014  3140              ADDS     r1,r1,#0x40
000016  6108              STR      r0,[r1,#0x10]
;;;840    }
000018  bd10              POP      {r4,pc}
;;;841    
                          ENDP

00001a  0000              DCW      0x0000
                  |L47.28|
                          DCD      0x40058000

                          AREA ||i.L_R_WING_MOTOR_HW_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_MOTOR_HW_Init PROC
;;;841    
;;;842    void L_R_WING_MOTOR_HW_Init(void)	//PB.5 : H (PWM0_CH0) ,PB.4 : L (PWM0_CH1)
000000  b510              PUSH     {r4,lr}
;;;843    {
;;;844        CLK_EnableModuleClock(MODULE_CLOCK_L_R_WING_MOTOR_HIN);
000002  4c09              LDR      r4,|L48.40|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;845        CLK_SetModuleClock(MODULE_CLOCK_L_R_WING_MOTOR_HIN, CLK_CLKSEL2_PWM0SEL_PCLK0, 0);
00000a  2200              MOVS     r2,#0
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       CLK_SetModuleClock
;;;846    
;;;847        SYS->GPB_MFPL = (SYS->GPB_MFPL & (~(MFP_MASK_L_R_WING_MOTOR_HIN | MFP_MASK_L_R_WING_MOTOR_LIN ))) |
000014  06a0              LSLS     r0,r4,#26
000016  6b81              LDR      r1,[r0,#0x38]
000018  22ff              MOVS     r2,#0xff
00001a  0412              LSLS     r2,r2,#16
00001c  4391              BICS     r1,r1,r2
00001e  22bb              MOVS     r2,#0xbb
000020  0412              LSLS     r2,r2,#16
000022  1889              ADDS     r1,r1,r2
000024  6381              STR      r1,[r0,#0x38]
;;;848                        (MFP_FUNC_L_R_WING_MOTOR_HIN | MFP_FUNC_L_R_WING_MOTOR_LIN);	
;;;849    }
000026  bd10              POP      {r4,pc}
;;;850    
                          ENDP

                  |L48.40|
                          DCD      0xa2000010

                          AREA ||i.L_R_WING_MOTOR_LIN_PWM_Set||, CODE, READONLY, ALIGN=2

                  L_R_WING_MOTOR_LIN_PWM_Set PROC
;;;819    
;;;820    void L_R_WING_MOTOR_LIN_PWM_Set(uint16_t duty)
000000  b510              PUSH     {r4,lr}
;;;821    {
;;;822    //	PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_CH_L_R_WING_MOTOR_LIN, PWM_FREQ_L_R_WING_MOTOR_LIN, duty);
;;;823    
;;;824        uint32_t u32NewCMR = 0;
;;;825    
;;;826        u32NewCMR = PWM_GET_CNR(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_CH_L_R_WING_MOTOR_LIN);
000002  4906              LDR      r1,|L49.28|
000004  6b09              LDR      r1,[r1,#0x30]
;;;827        u32NewCMR = u32NewCMR * (100-duty)/100;
000006  2264              MOVS     r2,#0x64
000008  1a10              SUBS     r0,r2,r0
00000a  4348              MULS     r0,r1,r0
00000c  4611              MOV      r1,r2
00000e  f7fffffe          BL       __aeabi_uidivmod
;;;828    	PWM_SET_CMR(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_CH_L_R_WING_MOTOR_LIN, u32NewCMR);
000012  4902              LDR      r1,|L49.28|
000014  3140              ADDS     r1,r1,#0x40
000016  6148              STR      r0,[r1,#0x14]
;;;829    }
000018  bd10              POP      {r4,pc}
;;;830    
                          ENDP

00001a  0000              DCW      0x0000
                  |L49.28|
                          DCD      0x40058000

                          AREA ||i.L_R_WING_MOTOR_PWM_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_MOTOR_PWM_Init PROC
;;;850    
;;;851    void L_R_WING_MOTOR_PWM_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;852    {
;;;853        PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_CH_L_R_WING_MOTOR_HIN, PWM_FREQ_L_R_WING_MOTOR_HIN, 0);
000002  4c33              LDR      r4,|L50.208|
000004  2300              MOVS     r3,#0
000006  227d              MOVS     r2,#0x7d
000008  00d2              LSLS     r2,r2,#3
00000a  4619              MOV      r1,r3
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       PWM_ConfigOutputChannel
;;;854        PWM_EnableOutput(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_MASK_L_R_WING_MOTOR_HIN);
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       PWM_EnableOutput
;;;855        PWM_SET_OUTPUT_LEVEL(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_MASK_L_R_WING_MOTOR_HIN, PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW);
00001a  4c2d              LDR      r4,|L50.208|
00001c  2000              MOVS     r0,#0
00001e  2501              MOVS     r5,#1                 ;854
000020  3480              ADDS     r4,r4,#0x80
                  |L50.34|
000022  4629              MOV      r1,r5
000024  4081              LSLS     r1,r1,r0
000026  07c9              LSLS     r1,r1,#31
000028  d018              BEQ      |L50.92|
00002a  6b22              LDR      r2,[r4,#0x30]
00002c  2603              MOVS     r6,#3
00002e  0041              LSLS     r1,r0,#1
000030  4637              MOV      r7,r6
000032  408f              LSLS     r7,r7,r1
000034  43ba              BICS     r2,r2,r7
000036  6322              STR      r2,[r4,#0x30]
000038  6b23              LDR      r3,[r4,#0x30]
00003a  4632              MOV      r2,r6
00003c  3110              ADDS     r1,r1,#0x10
00003e  408a              LSLS     r2,r2,r1
000040  2602              MOVS     r6,#2
000042  4393              BICS     r3,r3,r2
000044  408e              LSLS     r6,r6,r1
000046  4333              ORRS     r3,r3,r6
000048  6323              STR      r3,[r4,#0x30]
00004a  6b63              LDR      r3,[r4,#0x34]
00004c  43bb              BICS     r3,r3,r7
00004e  6363              STR      r3,[r4,#0x34]
000050  6b63              LDR      r3,[r4,#0x34]
000052  4393              BICS     r3,r3,r2
000054  462a              MOV      r2,r5
000056  408a              LSLS     r2,r2,r1
000058  4313              ORRS     r3,r3,r2
00005a  6363              STR      r3,[r4,#0x34]
                  |L50.92|
00005c  1c40              ADDS     r0,r0,#1
00005e  2806              CMP      r0,#6
000060  dbdf              BLT      |L50.34|
;;;856    
;;;857        PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_CH_L_R_WING_MOTOR_LIN, PWM_FREQ_L_R_WING_MOTOR_LIN, 0);
000062  4e1b              LDR      r6,|L50.208|
000064  227d              MOVS     r2,#0x7d
000066  2300              MOVS     r3,#0
000068  00d2              LSLS     r2,r2,#3
00006a  2101              MOVS     r1,#1
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       PWM_ConfigOutputChannel
;;;858        PWM_EnableOutput(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_MASK_L_R_WING_MOTOR_LIN);
000072  2102              MOVS     r1,#2
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       PWM_EnableOutput
;;;859        PWM_SET_OUTPUT_LEVEL(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_MASK_L_R_WING_MOTOR_LIN, PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW);
00007a  2000              MOVS     r0,#0
                  |L50.124|
00007c  2701              MOVS     r7,#1
00007e  4639              MOV      r1,r7
000080  4081              LSLS     r1,r1,r0
000082  0789              LSLS     r1,r1,#30
000084  d517              BPL      |L50.182|
000086  6b22              LDR      r2,[r4,#0x30]
000088  2603              MOVS     r6,#3
00008a  0041              LSLS     r1,r0,#1
00008c  4633              MOV      r3,r6
00008e  408b              LSLS     r3,r3,r1
000090  439a              BICS     r2,r2,r3
000092  6322              STR      r2,[r4,#0x30]
000094  6b25              LDR      r5,[r4,#0x30]
000096  4632              MOV      r2,r6
000098  3110              ADDS     r1,r1,#0x10
00009a  408a              LSLS     r2,r2,r1
00009c  2602              MOVS     r6,#2
00009e  4395              BICS     r5,r5,r2
0000a0  408e              LSLS     r6,r6,r1
0000a2  4335              ORRS     r5,r5,r6
0000a4  6325              STR      r5,[r4,#0x30]
0000a6  6b65              LDR      r5,[r4,#0x34]
0000a8  439d              BICS     r5,r5,r3
0000aa  6365              STR      r5,[r4,#0x34]
0000ac  6b63              LDR      r3,[r4,#0x34]
0000ae  408f              LSLS     r7,r7,r1
0000b0  4393              BICS     r3,r3,r2
0000b2  433b              ORRS     r3,r3,r7
0000b4  6363              STR      r3,[r4,#0x34]
                  |L50.182|
0000b6  1c40              ADDS     r0,r0,#1
0000b8  2806              CMP      r0,#6
0000ba  dbdf              BLT      |L50.124|
;;;860    
;;;861        /* Start PWM module */
;;;862        PWM_Start(PWM_BASE_L_R_WING_MOTOR_HIN, PWM_MASK_L_R_WING_MOTOR_HIN);
0000bc  4c04              LDR      r4,|L50.208|
0000be  2101              MOVS     r1,#1
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       PWM_Start
;;;863        PWM_Start(PWM_BASE_L_R_WING_MOTOR_LIN, PWM_MASK_L_R_WING_MOTOR_LIN);	
0000c6  2102              MOVS     r1,#2
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       PWM_Start
;;;864    }
0000ce  bdf8              POP      {r3-r7,pc}
;;;865    
                          ENDP

                  |L50.208|
                          DCD      0x40058000

                          AREA ||i.L_R_WING_Main_Flow||, CODE, READONLY, ALIGN=1

                  L_R_WING_Main_Flow PROC
;;;1232   
;;;1233   void L_R_WING_Main_Flow(void)
000000  b510              PUSH     {r4,lr}
;;;1234   {
;;;1235   	L_R_WING_Flow_Out_Packet_From_Master();
000002  f7fffffe          BL       L_R_WING_Flow_Out_Packet_From_Master
;;;1236   
;;;1237   	simple_test();
000006  f7fffffe          BL       simple_test
;;;1238   
;;;1239   }
00000a  bd10              POP      {r4,pc}
;;;1240   
                          ENDP


                          AREA ||i.L_R_WING_RING_LED_HW_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_RING_LED_HW_Init PROC
;;;926    
;;;927    void L_R_WING_RING_LED_HW_Init(void)	//PB.2 : R (PWM0_CH3) ,PB.1 : G (PWM0_CH4),PB.0 : B (PWM0_CH5)
000000  b510              PUSH     {r4,lr}
;;;928    {
;;;929        CLK_EnableModuleClock(MODULE_CLOCK_L_R_WING_RING_LED_R);
000002  4c08              LDR      r4,|L52.36|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;930        CLK_SetModuleClock(MODULE_CLOCK_L_R_WING_RING_LED_R, CLK_CLKSEL2_PWM0SEL_PCLK0, 0);
00000a  2200              MOVS     r2,#0
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       CLK_SetModuleClock
;;;931    
;;;932        SYS->GPB_MFPL = (SYS->GPB_MFPL & (~(MFP_MASK_L_R_WING_RING_LED_R | MFP_MASK_L_R_WING_RING_LED_G| MFP_MASK_L_R_WING_RING_LED_B ))) |
000014  06a0              LSLS     r0,r4,#26
000016  6b81              LDR      r1,[r0,#0x38]
000018  4a03              LDR      r2,|L52.40|
00001a  0b09              LSRS     r1,r1,#12
00001c  0309              LSLS     r1,r1,#12
00001e  1889              ADDS     r1,r1,r2
000020  6381              STR      r1,[r0,#0x38]
;;;933                        (MFP_FUNC_L_R_WING_RING_LED_R | MFP_FUNC_L_R_WING_RING_LED_G | MFP_FUNC_L_R_WING_RING_LED_B);	
;;;934    }
000022  bd10              POP      {r4,pc}
;;;935    
                          ENDP

                  |L52.36|
                          DCD      0xa2000010
                  |L52.40|
                          DCD      0x00000bbb

                          AREA ||i.L_R_WING_RING_LED_PWM_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_RING_LED_PWM_Init PROC
;;;935    
;;;936    void L_R_WING_RING_LED_PWM_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;937    {
;;;938        PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_RING_LED_R, PWM_CH_L_R_WING_RING_LED_R, PWM_FREQ_L_R_WING_RING_LED_R, 0);
000002  4c4b              LDR      r4,|L53.304|
000004  2300              MOVS     r3,#0
000006  4a49              LDR      r2,|L53.300|
000008  2103              MOVS     r1,#3
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       PWM_ConfigOutputChannel
;;;939        PWM_EnableOutput(PWM_BASE_L_R_WING_RING_LED_R, PWM_MASK_L_R_WING_RING_LED_R);
000010  2108              MOVS     r1,#8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       PWM_EnableOutput
;;;940        PWM_SET_OUTPUT_LEVEL(PWM_BASE_L_R_WING_RING_LED_R, PWM_MASK_L_R_WING_RING_LED_R, PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW);
000018  4c45              LDR      r4,|L53.304|
00001a  2000              MOVS     r0,#0
00001c  2501              MOVS     r5,#1
00001e  3480              ADDS     r4,r4,#0x80
                  |L53.32|
000020  4629              MOV      r1,r5
000022  4081              LSLS     r1,r1,r0
000024  0709              LSLS     r1,r1,#28
000026  d518              BPL      |L53.90|
000028  6b23              LDR      r3,[r4,#0x30]
00002a  2603              MOVS     r6,#3
00002c  0041              LSLS     r1,r0,#1
00002e  4632              MOV      r2,r6
000030  408a              LSLS     r2,r2,r1
000032  4393              BICS     r3,r3,r2
000034  6323              STR      r3,[r4,#0x30]
000036  6b23              LDR      r3,[r4,#0x30]
000038  4637              MOV      r7,r6
00003a  3110              ADDS     r1,r1,#0x10
00003c  408f              LSLS     r7,r7,r1
00003e  2602              MOVS     r6,#2
000040  43bb              BICS     r3,r3,r7
000042  408e              LSLS     r6,r6,r1
000044  4333              ORRS     r3,r3,r6
000046  6323              STR      r3,[r4,#0x30]
000048  6b63              LDR      r3,[r4,#0x34]
00004a  4393              BICS     r3,r3,r2
00004c  6363              STR      r3,[r4,#0x34]
00004e  6b62              LDR      r2,[r4,#0x34]
000050  462b              MOV      r3,r5
000052  43ba              BICS     r2,r2,r7
000054  408b              LSLS     r3,r3,r1
000056  431a              ORRS     r2,r2,r3
000058  6362              STR      r2,[r4,#0x34]
                  |L53.90|
00005a  1c40              ADDS     r0,r0,#1
00005c  2806              CMP      r0,#6
00005e  dbdf              BLT      |L53.32|
;;;941    
;;;942        PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_RING_LED_G, PWM_CH_L_R_WING_RING_LED_G, PWM_FREQ_L_R_WING_RING_LED_G, 0);
000060  4e33              LDR      r6,|L53.304|
000062  2300              MOVS     r3,#0
000064  4a31              LDR      r2,|L53.300|
000066  2104              MOVS     r1,#4
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       PWM_ConfigOutputChannel
;;;943        PWM_EnableOutput(PWM_BASE_L_R_WING_RING_LED_G, PWM_MASK_L_R_WING_RING_LED_G);
00006e  2110              MOVS     r1,#0x10
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       PWM_EnableOutput
;;;944       	PWM_SET_OUTPUT_LEVEL(PWM_BASE_L_R_WING_RING_LED_G, PWM_MASK_L_R_WING_RING_LED_G, PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW);
000076  2000              MOVS     r0,#0
                  |L53.120|
000078  4629              MOV      r1,r5
00007a  4081              LSLS     r1,r1,r0
00007c  06c9              LSLS     r1,r1,#27
00007e  d518              BPL      |L53.178|
000080  6b22              LDR      r2,[r4,#0x30]
000082  2603              MOVS     r6,#3
000084  0041              LSLS     r1,r0,#1
000086  4637              MOV      r7,r6
000088  408f              LSLS     r7,r7,r1
00008a  43ba              BICS     r2,r2,r7
00008c  6322              STR      r2,[r4,#0x30]
00008e  6b23              LDR      r3,[r4,#0x30]
000090  4632              MOV      r2,r6
000092  3110              ADDS     r1,r1,#0x10
000094  408a              LSLS     r2,r2,r1
000096  2602              MOVS     r6,#2
000098  4393              BICS     r3,r3,r2
00009a  408e              LSLS     r6,r6,r1
00009c  4333              ORRS     r3,r3,r6
00009e  6323              STR      r3,[r4,#0x30]
0000a0  6b63              LDR      r3,[r4,#0x34]
0000a2  43bb              BICS     r3,r3,r7
0000a4  6363              STR      r3,[r4,#0x34]
0000a6  6b63              LDR      r3,[r4,#0x34]
0000a8  4393              BICS     r3,r3,r2
0000aa  462a              MOV      r2,r5
0000ac  408a              LSLS     r2,r2,r1
0000ae  4313              ORRS     r3,r3,r2
0000b0  6363              STR      r3,[r4,#0x34]
                  |L53.178|
0000b2  1c40              ADDS     r0,r0,#1
0000b4  2806              CMP      r0,#6
0000b6  dbdf              BLT      |L53.120|
;;;945    
;;;946        PWM_ConfigOutputChannel(PWM_BASE_L_R_WING_RING_LED_B, PWM_CH_L_R_WING_RING_LED_B, PWM_FREQ_L_R_WING_RING_LED_B, 0);
0000b8  4e1d              LDR      r6,|L53.304|
0000ba  2300              MOVS     r3,#0
0000bc  4a1b              LDR      r2,|L53.300|
0000be  2105              MOVS     r1,#5
0000c0  4630              MOV      r0,r6
0000c2  f7fffffe          BL       PWM_ConfigOutputChannel
;;;947        PWM_EnableOutput(PWM_BASE_L_R_WING_RING_LED_B, PWM_MASK_L_R_WING_RING_LED_B);
0000c6  2120              MOVS     r1,#0x20
0000c8  4630              MOV      r0,r6
0000ca  f7fffffe          BL       PWM_EnableOutput
;;;948       	PWM_SET_OUTPUT_LEVEL(PWM_BASE_L_R_WING_RING_LED_B, PWM_MASK_L_R_WING_RING_LED_B, PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW);
0000ce  2000              MOVS     r0,#0
                  |L53.208|
0000d0  2701              MOVS     r7,#1
0000d2  4639              MOV      r1,r7
0000d4  4081              LSLS     r1,r1,r0
0000d6  0689              LSLS     r1,r1,#26
0000d8  d517              BPL      |L53.266|
0000da  6b22              LDR      r2,[r4,#0x30]
0000dc  2603              MOVS     r6,#3
0000de  0041              LSLS     r1,r0,#1
0000e0  4633              MOV      r3,r6
0000e2  408b              LSLS     r3,r3,r1
0000e4  439a              BICS     r2,r2,r3
0000e6  6322              STR      r2,[r4,#0x30]
0000e8  6b25              LDR      r5,[r4,#0x30]
0000ea  4632              MOV      r2,r6
0000ec  3110              ADDS     r1,r1,#0x10
0000ee  408a              LSLS     r2,r2,r1
0000f0  2602              MOVS     r6,#2
0000f2  4395              BICS     r5,r5,r2
0000f4  408e              LSLS     r6,r6,r1
0000f6  4335              ORRS     r5,r5,r6
0000f8  6325              STR      r5,[r4,#0x30]
0000fa  6b65              LDR      r5,[r4,#0x34]
0000fc  439d              BICS     r5,r5,r3
0000fe  6365              STR      r5,[r4,#0x34]
000100  6b63              LDR      r3,[r4,#0x34]
000102  408f              LSLS     r7,r7,r1
000104  4393              BICS     r3,r3,r2
000106  433b              ORRS     r3,r3,r7
000108  6363              STR      r3,[r4,#0x34]
                  |L53.266|
00010a  1c40              ADDS     r0,r0,#1
00010c  2806              CMP      r0,#6
00010e  dbdf              BLT      |L53.208|
;;;949    
;;;950        /* Start PWM module */
;;;951        PWM_Start(PWM_BASE_L_R_WING_RING_LED_R, PWM_MASK_L_R_WING_RING_LED_R);
000110  4c07              LDR      r4,|L53.304|
000112  2108              MOVS     r1,#8
000114  4620              MOV      r0,r4
000116  f7fffffe          BL       PWM_Start
;;;952        PWM_Start(PWM_BASE_L_R_WING_RING_LED_G, PWM_MASK_L_R_WING_RING_LED_G);
00011a  2110              MOVS     r1,#0x10
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       PWM_Start
;;;953        PWM_Start(PWM_BASE_L_R_WING_RING_LED_B, PWM_MASK_L_R_WING_RING_LED_B);	
000122  2120              MOVS     r1,#0x20
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       PWM_Start
;;;954    }
00012a  bdf8              POP      {r3-r7,pc}
;;;955    
                          ENDP

                  |L53.300|
                          DCD      0x00002710
                  |L53.304|
                          DCD      0x40058000

                          AREA ||i.L_R_WING_RING_LED_PWM_Set||, CODE, READONLY, ALIGN=2

                  L_R_WING_RING_LED_PWM_Set PROC
;;;904    
;;;905    void L_R_WING_RING_LED_PWM_Set(uint16_t Duty_R , uint16_t Duty_G , uint16_t Duty_B)
000000  b5f8              PUSH     {r3-r7,lr}
;;;906    {
000002  460f              MOV      r7,r1
;;;907    //	PWM_ConfigOutputChannel(MODULE_CLOCK_L_R_WING_RING_LED_R, PWM_CH_L_R_WING_RING_LED_R, PWM_FREQ_L_R_WING_RING_LED_R, Duty_R);
;;;908    //	PWM_ConfigOutputChannel(MODULE_CLOCK_L_R_WING_RING_LED_G, PWM_CH_L_R_WING_RING_LED_G, PWM_FREQ_L_R_WING_RING_LED_G, Duty_G);
;;;909    //	PWM_ConfigOutputChannel(MODULE_CLOCK_L_R_WING_RING_LED_B, PWM_CH_L_R_WING_RING_LED_B, PWM_FREQ_L_R_WING_RING_LED_B, Duty_B);
;;;910    
;;;911        uint32_t u32NewCMR = 0;
;;;912    
;;;913        u32NewCMR = PWM_GET_CNR(PWM_BASE_L_R_WING_RING_LED_R, PWM_CH_L_R_WING_RING_LED_R);
000004  490d              LDR      r1,|L54.60|
000006  4616              MOV      r6,r2                 ;906
000008  6b89              LDR      r1,[r1,#0x38]
;;;914        u32NewCMR = u32NewCMR * (100-Duty_R)/100;
00000a  2564              MOVS     r5,#0x64
00000c  1a28              SUBS     r0,r5,r0
00000e  4348              MULS     r0,r1,r0
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       __aeabi_uidivmod
;;;915    	PWM_SET_CMR(PWM_BASE_L_R_WING_RING_LED_R, PWM_CH_L_R_WING_RING_LED_R, u32NewCMR);
000016  4c09              LDR      r4,|L54.60|
000018  3440              ADDS     r4,r4,#0x40
00001a  61e0              STR      r0,[r4,#0x1c]
;;;916    
;;;917        u32NewCMR = PWM_GET_CNR(PWM_BASE_L_R_WING_RING_LED_G, PWM_CH_L_R_WING_RING_LED_G);
00001c  6821              LDR      r1,[r4,#0]
;;;918        u32NewCMR = u32NewCMR * (100-Duty_G)/100;
00001e  1be8              SUBS     r0,r5,r7
000020  4348              MULS     r0,r1,r0
000022  2164              MOVS     r1,#0x64
000024  f7fffffe          BL       __aeabi_uidivmod
;;;919    	PWM_SET_CMR(PWM_BASE_L_R_WING_RING_LED_G, PWM_CH_L_R_WING_RING_LED_G, u32NewCMR);
000028  6220              STR      r0,[r4,#0x20]
;;;920    
;;;921        u32NewCMR = PWM_GET_CNR(PWM_BASE_L_R_WING_RING_LED_B, PWM_CH_L_R_WING_RING_LED_B);
00002a  6821              LDR      r1,[r4,#0]
;;;922        u32NewCMR = u32NewCMR * (100-Duty_B)/100;
00002c  1ba8              SUBS     r0,r5,r6
00002e  4348              MULS     r0,r1,r0
000030  2164              MOVS     r1,#0x64
000032  f7fffffe          BL       __aeabi_uidivmod
;;;923    	PWM_SET_CMR(PWM_BASE_L_R_WING_RING_LED_B, PWM_CH_L_R_WING_RING_LED_B, u32NewCMR);
000036  6260              STR      r0,[r4,#0x24]
;;;924    
;;;925    }
000038  bdf8              POP      {r3-r7,pc}
;;;926    
                          ENDP

00003a  0000              DCW      0x0000
                  |L54.60|
                          DCD      0x40058000

                          AREA ||i.L_R_WING_SLAVE_I2C0_HW_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_SLAVE_I2C0_HW_Init PROC
;;;293    
;;;294    void L_R_WING_SLAVE_I2C0_HW_Init(void)	//PC1 : SCL , PC0 : SDA
000000  b510              PUSH     {r4,lr}
;;;295    {
;;;296        CLK_EnableModuleClock(MODULE_CLOCK_L_R_WING_SLAVE_I2C);
000002  4805              LDR      r0,|L55.24|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;297    
;;;298        /* Set I2C0 multi-function pins */
;;;299        SYS->GPC_MFPL = (SYS->GPC_MFPL & ~(MFP_MASK_L_R_WING_SLAVE_I2C_SCL | MFP_MASK_L_R_WING_SLAVE_I2C_SDA)) |
000008  4803              LDR      r0,|L55.24|
00000a  3038              ADDS     r0,r0,#0x38
00000c  6801              LDR      r1,[r0,#0]
00000e  0a09              LSRS     r1,r1,#8
000010  0209              LSLS     r1,r1,#8
000012  3199              ADDS     r1,r1,#0x99
000014  6001              STR      r1,[r0,#0]
;;;300                        (MFP_FUNC_L_R_WING_SLAVE_I2C_SDA | MFP_FUNC_L_R_WING_SLAVE_I2C_SCL);
;;;301    
;;;302    }
000016  bd10              POP      {r4,pc}
;;;303    
                          ENDP

                  |L55.24|
                          DCD      0x40000008

                          AREA ||i.L_R_WING_SLAVE_I2C0_Init||, CODE, READONLY, ALIGN=1

                  L_R_WING_SLAVE_I2C0_Init PROC
;;;303    
;;;304    void L_R_WING_SLAVE_I2C0_Init(void)	//PC1 : SCL , PC0 : SDA
000000  4770              BX       lr
;;;305    {
;;;306    
;;;307    	
;;;308    }
;;;309    
                          ENDP


                          AREA ||i.L_R_WING_SLAVE_I2C0_Receive||, CODE, READONLY, ALIGN=1

                  L_R_WING_SLAVE_I2C0_Receive PROC
;;;274    
;;;275    void L_R_WING_SLAVE_I2C0_Receive(uint8_t DeviceAddr, 
000000  4770              BX       lr
;;;276    								uint8_t RegisterAddr,
;;;277                                  	uint16_t NumByteToRead,
;;;278                                  	uint8_t* pBuffer)
;;;279    {
;;;280    	
;;;281    	
;;;282    
;;;283    }
;;;284    void L_R_WING_SLAVE_I2C0_Report(uint8_t DeviceAddr, 
                          ENDP


                          AREA ||i.L_R_WING_SLAVE_I2C0_Report||, CODE, READONLY, ALIGN=1

                  L_R_WING_SLAVE_I2C0_Report PROC
;;;283    }
;;;284    void L_R_WING_SLAVE_I2C0_Report(uint8_t DeviceAddr, 
000000  4770              BX       lr
;;;285    								uint8_t RegisterAddr,
;;;286                                   	uint16_t NumByteToWrite,
;;;287                                   	uint8_t* pBuffer)
;;;288    {
;;;289    
;;;290    
;;;291    }
;;;292    
                          ENDP


                          AREA ||i.L_R_WING_THUMB_ADC_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_THUMB_ADC_Init PROC
;;;795    
;;;796    void L_R_WING_THUMB_ADC_Init(void)
000000  b510              PUSH     {r4,lr}
;;;797    {
;;;798    	_PDMA_Init();
000002  f7fffffe          BL       _PDMA_Init
;;;799    
;;;800    	_ADC_ReadAVdd();
000006  f7fffffe          BL       _ADC_ReadAVdd
;;;801    
;;;802        /* Enable ADC converter */
;;;803        ADC_POWER_ON(ADC);
00000a  4810              LDR      r0,|L59.76|
00000c  6801              LDR      r1,[r0,#0]
00000e  2201              MOVS     r2,#1
000010  4311              ORRS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
000014  480e              LDR      r0,|L59.80|
000016  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
000018  480e              LDR      r0,|L59.84|
00001a  4341              MULS     r1,r0,r1
00001c  480e              LDR      r0,|L59.88|
00001e  6141              STR      r1,[r0,#0x14]
000020  2200              MOVS     r2,#0
000022  6182              STR      r2,[r0,#0x18]
000024  2105              MOVS     r1,#5
000026  6101              STR      r1,[r0,#0x10]
                  |L59.40|
000028  6901              LDR      r1,[r0,#0x10]
00002a  03c9              LSLS     r1,r1,#15
00002c  d5fc              BPL      |L59.40|
00002e  6102              STR      r2,[r0,#0x10]
;;;804    
;;;805        /*Wait for ADC internal power ready*/
;;;806        CLK_SysTickDelay(10000);
;;;807    
;;;808        /* Set input mode as single-end, and Single mode*/
;;;809        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_CONTINUOUS,(uint32_t) BIT0|BIT1);
000030  4c06              LDR      r4,|L59.76|
000032  2303              MOVS     r3,#3
000034  3c80              SUBS     r4,r4,#0x80
000036  220c              MOVS     r2,#0xc
000038  2100              MOVS     r1,#0
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       ADC_Open
;;;810    
;;;811        /* To sample band-gap precisely, the ADC capacitor must be charged at least 3 us for charging the ADC capacitor ( Cin )*/
;;;812        /* Sampling time = extended sampling time + 1 */
;;;813        /* 1/24000000 * (Sampling time) = 3 us */
;;;814    
;;;815        /* Set extend sampling time based on external resistor value.*/
;;;816        ADC_SetExtendSampleTime(ADC,(uint32_t) NULL, ADCextendSampling);
000040  2200              MOVS     r2,#0
000042  4611              MOV      r1,r2
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       ADC_SetExtendSampleTime
;;;817    	
;;;818    }
00004a  bd10              POP      {r4,pc}
;;;819    
                          ENDP

                  |L59.76|
                          DCD      0x40043080
                  |L59.80|
                          DCD      CyclesPerUs
                  |L59.84|
                          DCD      0x00002710
                  |L59.88|
                          DCD      0xe000e000

                          AREA ||i.L_R_WING_THUMB_HW_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_THUMB_HW_Init PROC
;;;779    
;;;780    void L_R_WING_THUMB_HW_Init(void)	//PB13 : X (ADC0_CH13) , PB12 : Y (ADC0_CH12 )
000000  b510              PUSH     {r4,lr}
;;;781    {
;;;782        CLK_EnableModuleClock(MODULE_CLOCK_L_R_WING_THUMB_X);
000002  4c12              LDR      r4,|L60.76|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;783        CLK_SetModuleClock(MODULE_CLOCK_L_R_WING_THUMB_X, CLOCK_SEL_L_R_WING_THUMB_X, CLK_CLKDIV0_ADC(2));
00000a  2201              MOVS     r2,#1
00000c  0412              LSLS     r2,r2,#16
00000e  0151              LSLS     r1,r2,#5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       CLK_SetModuleClock
;;;784    	
;;;785        /* Enable PDMA clock source */
;;;786        CLK_EnableModuleClock(PDMA_MODULE);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       CLK_EnableModuleClock
;;;787    
;;;788        SYS->GPB_MFPH = (SYS->GPB_MFPH &~(MFP_MASK_L_R_WING_THUMB_X | MFP_MASK_L_R_WING_THUMB_Y )) \
00001c  2001              MOVS     r0,#1
00001e  0780              LSLS     r0,r0,#30
000020  6bc1              LDR      r1,[r0,#0x3c]
000022  22ff              MOVS     r2,#0xff
000024  0412              LSLS     r2,r2,#16
000026  4391              BICS     r1,r1,r2
000028  2211              MOVS     r2,#0x11
00002a  0412              LSLS     r2,r2,#16
00002c  1889              ADDS     r1,r1,r2
00002e  63c1              STR      r1,[r0,#0x3c]
;;;789                        | (MFP_FUNC_L_R_WING_THUMB_X | MFP_FUNC_L_R_WING_THUMB_Y);
;;;790    
;;;791        GPIO_SetMode(GPIO_PORT_L_R_WING_THUMB_X, GPIO_PIN_L_R_WING_THUMB_X|GPIO_PIN_L_R_WING_THUMB_Y, GPIO_MODE_L_R_WING_THUMB_X);
000030  4c07              LDR      r4,|L60.80|
000032  2103              MOVS     r1,#3
000034  2200              MOVS     r2,#0
000036  0309              LSLS     r1,r1,#12
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       GPIO_SetMode
;;;792    
;;;793        GPIO_DISABLE_DIGITAL_PATH(GPIO_PORT_L_R_WING_THUMB_X, GPIO_PIN_L_R_WING_THUMB_X|GPIO_PIN_L_R_WING_THUMB_Y);
00003e  6861              LDR      r1,[r4,#4]
000040  2203              MOVS     r2,#3
000042  0712              LSLS     r2,r2,#28
000044  4311              ORRS     r1,r1,r2
000046  6061              STR      r1,[r4,#4]
;;;794    }
000048  bd10              POP      {r4,pc}
;;;795    
                          ENDP

00004a  0000              DCW      0x0000
                  |L60.76|
                          DCD      0x6743fe1c
                  |L60.80|
                          DCD      0x40004040

                          AREA ||i.L_R_WING_THUMB_X_GetADC||, CODE, READONLY, ALIGN=2

                  L_R_WING_THUMB_X_GetADC PROC
;;;743    
;;;744    uint32_t L_R_WING_THUMB_X_GetADC(void)		//PB13 : X (ADC0_CH13)
000000  b510              PUSH     {r4,lr}
;;;745    {
;;;746    	uint32_t ch = 13;
;;;747    	
;;;748        /* reload PDMA configuration for next transmission */
;;;749        _ReloadPDMA();
000002  f7fffffe          BL       _ReloadPDMA
;;;750    
;;;751        /* Select ADC input channel */
;;;752        ADC_SET_INPUT_CHANNEL(ADC, 0x1 << ch);
000006  4814              LDR      r0,|L61.88|
000008  6841              LDR      r1,[r0,#4]
00000a  2201              MOVS     r2,#1
00000c  0351              LSLS     r1,r2,#13
00000e  6041              STR      r1,[r0,#4]
;;;753    
;;;754        /* ADC enable PDMA transfer */
;;;755        ADC_ENABLE_PDMA(ADC);
000010  6801              LDR      r1,[r0,#0]
000012  1543              ASRS     r3,r0,#21
000014  4319              ORRS     r1,r1,r3
000016  6001              STR      r1,[r0,#0]
;;;756    
;;;757        /* Start ADC conversion */
;;;758        ADC_START_CONV(ADC);
000018  6801              LDR      r1,[r0,#0]
00001a  14c3              ASRS     r3,r0,#19
00001c  4319              ORRS     r1,r1,r3
00001e  6001              STR      r1,[r0,#0]
000020  480e              LDR      r0,|L61.92|
000022  7801              LDRB     r1,[r0,#0]
                  |L61.36|
;;;759    
;;;760    	while(_Is_ADC_DataReady() == 0);
000024  2900              CMP      r1,#0
000026  d0fd              BEQ      |L61.36|
;;;761    
;;;762    	_ADC_DataReady(0);
000028  2100              MOVS     r1,#0
00002a  7001              STRB     r1,[r0,#0]
;;;763    
;;;764    //	/* Stop ADC conversion */
;;;765    //	ADC_STOP_CONV(ADC);
;;;766    
;;;767    //	/* Disable PDMA function of ADC */
;;;768    //	ADC_DISABLE_PDMA(ADC);
;;;769    
;;;770        g_u32ResultSum = 0;
00002c  6181              STR      r1,[r0,#0x18]  ; g_u32ResultSum
;;;771        for(g_u32ADCounter = 1; (g_u32ADCounter) < (ADCDatalenght+1); g_u32ADCounter++)
00002e  6142              STR      r2,[r0,#0x14]  ; g_u32ADCounter
;;;772        {
;;;773            g_u32ResultSum += g_i32ConversionData[g_u32ADCounter];
000030  490b              LDR      r1,|L61.96|
000032  e008              B        |L61.70|
                  |L61.52|
000034  6942              LDR      r2,[r0,#0x14]  ; g_u32ADCounter
000036  6983              LDR      r3,[r0,#0x18]  ; g_u32ResultSum
000038  0052              LSLS     r2,r2,#1
00003a  5e8a              LDRSH    r2,[r1,r2]
00003c  18d2              ADDS     r2,r2,r3
00003e  6182              STR      r2,[r0,#0x18]  ; g_u32ResultSum
000040  6942              LDR      r2,[r0,#0x14]         ;771  ; g_u32ADCounter
000042  1c52              ADDS     r2,r2,#1              ;771
000044  6142              STR      r2,[r0,#0x14]         ;771  ; g_u32ADCounter
                  |L61.70|
000046  6942              LDR      r2,[r0,#0x14]         ;771  ; g_u32ADCounter
000048  2a11              CMP      r2,#0x11              ;771
00004a  d3f3              BCC      |L61.52|
;;;774        }
;;;775        g_u32ResultSum /= (ADCDatalenght);	
00004c  6981              LDR      r1,[r0,#0x18]  ; g_u32ResultSum
00004e  0909              LSRS     r1,r1,#4
000050  6181              STR      r1,[r0,#0x18]  ; g_u32ResultSum
;;;776    
;;;777    	return (g_u32ResultSum);
000052  6980              LDR      r0,[r0,#0x18]  ; g_u32ResultSum
;;;778    }
000054  bd10              POP      {r4,pc}
;;;779    
                          ENDP

000056  0000              DCW      0x0000
                  |L61.88|
                          DCD      0x40043080
                  |L61.92|
                          DCD      ||.data||
                  |L61.96|
                          DCD      ||.bss||

                          AREA ||i.L_R_WING_THUMB_Y_GetADC||, CODE, READONLY, ALIGN=2

                  L_R_WING_THUMB_Y_GetADC PROC
;;;707    
;;;708    uint32_t L_R_WING_THUMB_Y_GetADC(void)		//PB12 : Y (ADC0_CH12 )
000000  b510              PUSH     {r4,lr}
;;;709    {
;;;710    	uint32_t ch = 12;
;;;711    	
;;;712        /* reload PDMA configuration for next transmission */
;;;713        _ReloadPDMA();
000002  f7fffffe          BL       _ReloadPDMA
;;;714    
;;;715        /* Select ADC input channel */
;;;716        ADC_SET_INPUT_CHANNEL(ADC, 0x1 << ch);
000006  4814              LDR      r0,|L62.88|
000008  6841              LDR      r1,[r0,#4]
00000a  2201              MOVS     r2,#1
00000c  0311              LSLS     r1,r2,#12
00000e  6041              STR      r1,[r0,#4]
;;;717    
;;;718        /* ADC enable PDMA transfer */
;;;719        ADC_ENABLE_PDMA(ADC);
000010  6801              LDR      r1,[r0,#0]
000012  1543              ASRS     r3,r0,#21
000014  4319              ORRS     r1,r1,r3
000016  6001              STR      r1,[r0,#0]
;;;720    
;;;721        /* Start ADC conversion */
;;;722        ADC_START_CONV(ADC);
000018  6801              LDR      r1,[r0,#0]
00001a  14c3              ASRS     r3,r0,#19
00001c  4319              ORRS     r1,r1,r3
00001e  6001              STR      r1,[r0,#0]
000020  480e              LDR      r0,|L62.92|
000022  7801              LDRB     r1,[r0,#0]
                  |L62.36|
;;;723    
;;;724    	while(_Is_ADC_DataReady() == 0);
000024  2900              CMP      r1,#0
000026  d0fd              BEQ      |L62.36|
;;;725    
;;;726    	_ADC_DataReady(0);
000028  2100              MOVS     r1,#0
00002a  7001              STRB     r1,[r0,#0]
;;;727    
;;;728    //	/* Stop ADC conversion */
;;;729    //	ADC_STOP_CONV(ADC);
;;;730    
;;;731    //	/* Disable PDMA function of ADC */
;;;732    //	ADC_DISABLE_PDMA(ADC);
;;;733    
;;;734        g_u32ResultSum = 0;
00002c  6181              STR      r1,[r0,#0x18]  ; g_u32ResultSum
;;;735        for(g_u32ADCounter = 1; (g_u32ADCounter) < (ADCDatalenght+1); g_u32ADCounter++)
00002e  6142              STR      r2,[r0,#0x14]  ; g_u32ADCounter
;;;736        {
;;;737            g_u32ResultSum += g_i32ConversionData[g_u32ADCounter];
000030  490b              LDR      r1,|L62.96|
000032  e008              B        |L62.70|
                  |L62.52|
000034  6942              LDR      r2,[r0,#0x14]  ; g_u32ADCounter
000036  6983              LDR      r3,[r0,#0x18]  ; g_u32ResultSum
000038  0052              LSLS     r2,r2,#1
00003a  5e8a              LDRSH    r2,[r1,r2]
00003c  18d2              ADDS     r2,r2,r3
00003e  6182              STR      r2,[r0,#0x18]  ; g_u32ResultSum
000040  6942              LDR      r2,[r0,#0x14]         ;735  ; g_u32ADCounter
000042  1c52              ADDS     r2,r2,#1              ;735
000044  6142              STR      r2,[r0,#0x14]         ;735  ; g_u32ADCounter
                  |L62.70|
000046  6942              LDR      r2,[r0,#0x14]         ;735  ; g_u32ADCounter
000048  2a11              CMP      r2,#0x11              ;735
00004a  d3f3              BCC      |L62.52|
;;;738        }
;;;739        g_u32ResultSum /= (ADCDatalenght);	
00004c  6981              LDR      r1,[r0,#0x18]  ; g_u32ResultSum
00004e  0909              LSRS     r1,r1,#4
000050  6181              STR      r1,[r0,#0x18]  ; g_u32ResultSum
;;;740    
;;;741    	return (g_u32ResultSum);
000052  6980              LDR      r0,[r0,#0x18]  ; g_u32ResultSum
;;;742    }
000054  bd10              POP      {r4,pc}
;;;743    
                          ENDP

000056  0000              DCW      0x0000
                  |L62.88|
                          DCD      0x40043080
                  |L62.92|
                          DCD      ||.data||
                  |L62.96|
                          DCD      ||.bss||

                          AREA ||i.L_R_WING_TIMER3_Init||, CODE, READONLY, ALIGN=2

                  L_R_WING_TIMER3_Init PROC
;;;1191   
;;;1192   void L_R_WING_TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;1193   {
;;;1194       TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L63.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
;;;1195       TIMER_EnableInt(TIMER3);
;;;1196       NVIC_EnableIRQ(TMR3_IRQn);	
00001a  200b              MOVS     r0,#0xb
00001c  f7fffffe          BL       NVIC_EnableIRQ
000020  6820              LDR      r0,[r4,#0]
000022  0661              LSLS     r1,r4,#25
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;1197       TIMER_Start(TIMER3);
;;;1198   }
000028  bd10              POP      {r4,pc}
;;;1199   
                          ENDP

00002a  0000              DCW      0x0000
                  |L63.44|
                          DCD      0x40051020

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;628     */
;;;629    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c1              LSLS     r1,r0,#27
;;;630    {
;;;631      NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000002  0ec9              LSRS     r1,r1,#27
000004  2001              MOVS     r0,#1
000006  4088              LSLS     r0,r0,r1
000008  4901              LDR      r1,|L64.16|
00000a  6008              STR      r0,[r1,#0]
;;;632    }
00000c  4770              BX       lr
;;;633    
                          ENDP

00000e  0000              DCW      0x0000
                  |L64.16|
                          DCD      0xe000e100

                          AREA ||i.PDMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  PDMA_IRQHandler PROC
;;;674    
;;;675    void PDMA_IRQHandler(void)
000000  4909              LDR      r1,|L65.40|
;;;676    {
;;;677        uint32_t status = PDMA_GET_INT_STATUS(PDMA);
000002  69c8              LDR      r0,[r1,#0x1c]
;;;678    
;;;679        if(status & PDMA_INTSTS_ABTIF_Msk)    /* abort */
;;;680        {
;;;681            if(PDMA_GET_ABORT_STS(PDMA) & PDMA_ABTSTS_ABTIF1_Msk)
;;;682            {
;;;683    //			printf("%s abort\r\n" , __FUNCTION__);
;;;684            }
;;;685            PDMA_CLR_ABORT_FLAG(PDMA, PDMA_ABTSTS_ABTIF1_Msk);
000004  2202              MOVS     r2,#2
000006  07c3              LSLS     r3,r0,#31             ;679
000008  2b00              CMP      r3,#0                 ;679
00000a  d002              BEQ      |L65.18|
00000c  6a08              LDR      r0,[r1,#0x20]         ;681
00000e  620a              STR      r2,[r1,#0x20]
                  |L65.16|
;;;686        }
;;;687        else if(status & PDMA_INTSTS_TDIF_Msk)      /* done */
;;;688        {
;;;689            if(PDMA_GET_TD_STS(PDMA) & PDMA_TDSTS_TDIF1_Msk)
;;;690            {
;;;691    //			printf("%s done\r\n" , __FUNCTION__);
;;;692    			_ADC_DataReady(1);
;;;693            }
;;;694            PDMA_CLR_TD_FLAG(PDMA, PDMA_TDSTS_TDIF1_Msk);
;;;695        }
;;;696        else
;;;697        {
;;;698    //        printf("unknown PDMA interrupt !!\n");
;;;699        }
;;;700    }
000010  4770              BX       lr
                  |L65.18|
000012  0780              LSLS     r0,r0,#30             ;687
000014  d5fc              BPL      |L65.16|
000016  6a48              LDR      r0,[r1,#0x24]         ;689
000018  0780              LSLS     r0,r0,#30             ;689
00001a  d502              BPL      |L65.34|
00001c  4b03              LDR      r3,|L65.44|
00001e  2001              MOVS     r0,#1                 ;692
000020  7018              STRB     r0,[r3,#0]            ;692
                  |L65.34|
000022  624a              STR      r2,[r1,#0x24]         ;694
000024  4770              BX       lr
;;;701    
                          ENDP

000026  0000              DCW      0x0000
                  |L65.40|
                          DCD      0x40008400
                  |L65.44|
                          DCD      ||.data||

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;1165   
;;;1166   void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4909              LDR      r1,|L66.40|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;1167   {
00000a  d00b              BEQ      |L66.36|
00000c  2001              MOVS     r0,#1
00000e  6088              STR      r0,[r1,#8]
;;;1168   	static uint16_t CNT = 0;
;;;1169   	
;;;1170   
;;;1171       if(TIMER_GetIntFlag(TIMER3) == 1)
;;;1172       {
;;;1173           TIMER_ClearIntFlag(TIMER3);
;;;1174   	
;;;1175   		if (CNT++ >= EVENT_CHECK_MS)
000010  4906              LDR      r1,|L66.44|
000012  8988              LDRH     r0,[r1,#0xc]  ; CNT
000014  1c42              ADDS     r2,r0,#1
000016  818a              STRH     r2,[r1,#0xc]
000018  2804              CMP      r0,#4
00001a  d303              BCC      |L66.36|
;;;1176   		{		
;;;1177   			CNT = 0;
00001c  2000              MOVS     r0,#0
00001e  8188              STRH     r0,[r1,#0xc]
;;;1178   
;;;1179   			L_R_WING_Flow_IN_Packet_ReportTo_Master();
000020  f7fffffe          BL       L_R_WING_Flow_IN_Packet_ReportTo_Master
                  |L66.36|
;;;1180   		}
;;;1181       }
;;;1182   }
000024  bd10              POP      {r4,pc}
;;;1183   
                          ENDP

000026  0000              DCW      0x0000
                  |L66.40|
                          DCD      0x40051020
                  |L66.44|
                          DCD      ||.data||

                          AREA ||i._ADC_DataReady||, CODE, READONLY, ALIGN=2

                  _ADC_DataReady PROC
;;;637    
;;;638    void _ADC_DataReady(uint8_t on)
000000  4901              LDR      r1,|L67.8|
;;;639    {
;;;640    	ADCDataReady = on;
000002  7008              STRB     r0,[r1,#0]
;;;641    }
000004  4770              BX       lr
;;;642    
                          ENDP

000006  0000              DCW      0x0000
                  |L67.8|
                          DCD      ||.data||

                          AREA ||i._ADC_ReadAVdd||, CODE, READONLY, ALIGN=2

                  _ADC_ReadAVdd PROC
;;;602    
;;;603    void _ADC_ReadAVdd(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;604    {
;;;605        int32_t  i32ConversionData;
;;;606        int32_t  i32BuiltInData;
;;;607    
;;;608        ADC_POWER_ON(ADC);
000002  4c28              LDR      r4,|L68.164|
000004  6820              LDR      r0,[r4,#0]
000006  2501              MOVS     r5,#1
000008  4328              ORRS     r0,r0,r5
00000a  6020              STR      r0,[r4,#0]
;;;609        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE, BIT29);
00000c  4e25              LDR      r6,|L68.164|
00000e  05a7              LSLS     r7,r4,#22
000010  2200              MOVS     r2,#0
000012  3e80              SUBS     r6,r6,#0x80
000014  463b              MOV      r3,r7
000016  4611              MOV      r1,r2
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       ADC_Open
;;;610        ADC_SetExtendSampleTime(ADC, 0, 71);
00001e  2247              MOVS     r2,#0x47
000020  2100              MOVS     r1,#0
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       ADC_SetExtendSampleTime
;;;611        ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
000028  6125              STR      r5,[r4,#0x10]
;;;612        ADC_ENABLE_INT(ADC, ADC_ADF_INT);
00002a  2101              MOVS     r1,#1
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       ADC_EnableInt
;;;613        NVIC_EnableIRQ(ADC_IRQn);
000032  201d              MOVS     r0,#0x1d
000034  f7fffffe          BL       NVIC_EnableIRQ
;;;614        g_u32AdcIntFlag = 0;
000038  491b              LDR      r1,|L68.168|
00003a  2000              MOVS     r0,#0
00003c  6108              STR      r0,[r1,#0x10]  ; g_u32AdcIntFlag
;;;615        ADC_START_CONV(ADC);
00003e  6820              LDR      r0,[r4,#0]
000040  14e2              ASRS     r2,r4,#19
000042  4310              ORRS     r0,r0,r2
000044  6020              STR      r0,[r4,#0]
000046  460c              MOV      r4,r1                 ;614
                  |L68.72|
;;;616    
;;;617        while(g_u32AdcIntFlag == 0);
000048  6920              LDR      r0,[r4,#0x10]  ; g_u32AdcIntFlag
00004a  2800              CMP      r0,#0
00004c  d0fc              BEQ      |L68.72|
;;;618        ADC_DISABLE_INT(ADC, ADC_ADF_INT);
00004e  2101              MOVS     r1,#1
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       ADC_DisableInt
;;;619    		
;;;620        i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, 29);
000056  4813              LDR      r0,|L68.164|
000058  3840              SUBS     r0,r0,#0x40
00005a  6b40              LDR      r0,[r0,#0x34]
00005c  2159              MOVS     r1,#0x59
00005e  b280              UXTH     r0,r0
000060  9000              STR      r0,[sp,#0]
000062  4812              LDR      r0,|L68.172|
000064  2216              MOVS     r2,#0x16
000066  2388              MOVS     r3,#0x88
                  |L68.104|
000068  6001              STR      r1,[r0,#0]
00006a  6002              STR      r2,[r0,#0]
00006c  6003              STR      r3,[r0,#0]
00006e  6806              LDR      r6,[r0,#0]
000070  2e00              CMP      r6,#0
000072  d0f9              BEQ      |L68.104|
;;;621        SYS_UnlockReg();
;;;622        FMC_Open();
000074  f7fffffe          BL       FMC_Open
000078  480d              LDR      r0,|L68.176|
00007a  2104              MOVS     r1,#4
00007c  60c1              STR      r1,[r0,#0xc]
00007e  2170              MOVS     r1,#0x70
000080  6041              STR      r1,[r0,#4]
000082  6105              STR      r5,[r0,#0x10]
                  |L68.132|
000084  6901              LDR      r1,[r0,#0x10]
000086  07c9              LSLS     r1,r1,#31
000088  d1fc              BNE      |L68.132|
00008a  6880              LDR      r0,[r0,#8]
;;;623        i32BuiltInData = _FMC_ReadBandGap();	
;;;624    
;;;625    //	printf("%s : %d,%d\r\n",__FUNCTION__, i32ConversionData,i32BuiltInData);
;;;626    
;;;627    	AVdd = 3072*i32BuiltInData/i32ConversionData;
00008c  2103              MOVS     r1,#3
00008e  0500              LSLS     r0,r0,#20
000090  0d00              LSRS     r0,r0,#20
000092  0289              LSLS     r1,r1,#10
000094  4348              MULS     r0,r1,r0
000096  9900              LDR      r1,[sp,#0]
000098  f7fffffe          BL       __aeabi_idivmod
00009c  80a0              STRH     r0,[r4,#4]
00009e  4805              LDR      r0,|L68.180|
0000a0  6007              STR      r7,[r0,#0]
;;;628    
;;;629        NVIC_DisableIRQ(ADC_IRQn);
;;;630    	
;;;631    }
0000a2  bdf8              POP      {r3-r7,pc}
;;;632    
                          ENDP

                  |L68.164|
                          DCD      0x40043080
                  |L68.168|
                          DCD      ||.data||
                  |L68.172|
                          DCD      0x40000100
                  |L68.176|
                          DCD      0x4000c000
                  |L68.180|
                          DCD      0xe000e180

                          AREA ||i._EventTrigger_INPacketToMaster_Set||, CODE, READONLY, ALIGN=2

                  _EventTrigger_INPacketToMaster_Set PROC
;;;269    
;;;270    void _EventTrigger_INPacketToMaster_Set(uint8_t on)
000000  4901              LDR      r1,|L69.8|
;;;271    {
;;;272    	EventFlag_INPacketToMaster = on;
000002  7048              STRB     r0,[r1,#1]
;;;273    }
000004  4770              BX       lr
;;;274    
                          ENDP

000006  0000              DCW      0x0000
                  |L69.8|
                          DCD      ||.data||

                          AREA ||i._EventTrigger_OUTPacketFromMaster_Get||, CODE, READONLY, ALIGN=2

                  _EventTrigger_OUTPacketFromMaster_Get PROC
;;;254    
;;;255    uint8_t _EventTrigger_OUTPacketFromMaster_Get(void)
000000  4801              LDR      r0,|L70.8|
;;;256    {
;;;257    	return EventFlag_OUTPacketFromMaster;
000002  7880              LDRB     r0,[r0,#2]  ; EventFlag_OUTPacketFromMaster
;;;258    }
000004  4770              BX       lr
;;;259    
                          ENDP

000006  0000              DCW      0x0000
                  |L70.8|
                          DCD      ||.data||

                          AREA ||i._EventTrigger_OUTPacketFromMaster_Set||, CODE, READONLY, ALIGN=2

                  _EventTrigger_OUTPacketFromMaster_Set PROC
;;;259    
;;;260    void _EventTrigger_OUTPacketFromMaster_Set(uint8_t on)
000000  4901              LDR      r1,|L71.8|
;;;261    {
;;;262    	EventFlag_OUTPacketFromMaster = on;
000002  7088              STRB     r0,[r1,#2]
;;;263    }
000004  4770              BX       lr
;;;264    
                          ENDP

000006  0000              DCW      0x0000
                  |L71.8|
                          DCD      ||.data||

                          AREA ||i._Is_ADC_DataReady||, CODE, READONLY, ALIGN=2

                  _Is_ADC_DataReady PROC
;;;632    
;;;633    uint8_t _Is_ADC_DataReady(void)
000000  4801              LDR      r0,|L72.8|
;;;634    {
;;;635    	return ADCDataReady;
000002  7800              LDRB     r0,[r0,#0]  ; ADCDataReady
;;;636    }
000004  4770              BX       lr
;;;637    
                          ENDP

000006  0000              DCW      0x0000
                  |L72.8|
                          DCD      ||.data||

                          AREA ||i._Is_EventTrigger_INPacketToMaster_Enable||, CODE, READONLY, ALIGN=2

                  _Is_EventTrigger_INPacketToMaster_Enable PROC
;;;264    
;;;265    uint8_t _Is_EventTrigger_INPacketToMaster_Enable(void)
000000  4801              LDR      r0,|L73.8|
;;;266    {
;;;267    	return EventFlag_INPacketToMaster;
000002  7840              LDRB     r0,[r0,#1]  ; EventFlag_INPacketToMaster
;;;268    }
000004  4770              BX       lr
;;;269    
                          ENDP

000006  0000              DCW      0x0000
                  |L73.8|
                          DCD      ||.data||

                          AREA ||i._PDMA_Init||, CODE, READONLY, ALIGN=2

                  _PDMA_Init PROC
;;;642    
;;;643    void _PDMA_Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;644    {
;;;645        /* Configure PDMA peripheral mode form ADC to memory */
;;;646        /* Open PDMA Channel 1 based on PDMAchannel setting*/
;;;647        PDMA_Open(PDMA, 1 << PDMAchannel);
000002  4d16              LDR      r5,|L74.92|
000004  2102              MOVS     r1,#2
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       PDMA_Open
;;;648    
;;;649        /* transfer width is half word(16 bit) and transfer count is ADCDatalenght+1 */
;;;650        PDMA_SetTransferCnt(PDMA, PDMAchannel, PDMA_WIDTH_16, ADCDatalenght+1);
00000c  2311              MOVS     r3,#0x11
00000e  14aa              ASRS     r2,r5,#18
000010  2101              MOVS     r1,#1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       PDMA_SetTransferCnt
;;;651    
;;;652        /* Set source address as ADC data register (no increment) and destination address as g_i32ConversionData array (increment) */
;;;653        PDMA_SetTransferAddr(PDMA, PDMAchannel, (uint32_t)&ADC->ADPDMA, PDMA_SAR_FIX, (uint32_t)g_i32ConversionData, PDMA_DAR_INC);
000018  4911              LDR      r1,|L74.96|
00001a  2400              MOVS     r4,#0
00001c  2303              MOVS     r3,#3
00001e  9100              STR      r1,[sp,#0]
000020  021b              LSLS     r3,r3,#8
000022  4a10              LDR      r2,|L74.100|
000024  9401              STR      r4,[sp,#4]
000026  2101              MOVS     r1,#1
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       PDMA_SetTransferAddr
;;;654    
;;;655        /* Select PDMA request source as ADC RX */
;;;656        PDMA_SetTransferMode(PDMA, PDMAchannel, PDMA_ADC_RX, FALSE, 0);
00002e  2300              MOVS     r3,#0
000030  2214              MOVS     r2,#0x14
000032  2101              MOVS     r1,#1
000034  4628              MOV      r0,r5
000036  9400              STR      r4,[sp,#0]
000038  f7fffffe          BL       PDMA_SetTransferMode
;;;657    
;;;658        /* Set PDMA as single request type for ADC */
;;;659        PDMA_SetBurstType(PDMA, PDMAchannel, PDMA_REQ_SINGLE, 0);
00003c  2300              MOVS     r3,#0
00003e  2204              MOVS     r2,#4
000040  2101              MOVS     r1,#1
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       PDMA_SetBurstType
;;;660    
;;;661        /* Enable PDMA interrupt */
;;;662        PDMA_EnableInt(PDMA, PDMAchannel, PDMA_INT_TRANS_DONE);
000048  2200              MOVS     r2,#0
00004a  2101              MOVS     r1,#1
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       PDMA_EnableInt
;;;663        NVIC_EnableIRQ(PDMA_IRQn);
000052  201a              MOVS     r0,#0x1a
000054  f7fffffe          BL       NVIC_EnableIRQ
;;;664    }
000058  bd7c              POP      {r2-r6,pc}
;;;665    
                          ENDP

00005a  0000              DCW      0x0000
                  |L74.92|
                          DCD      0x40008000
                  |L74.96|
                          DCD      ||.bss||
                  |L74.100|
                          DCD      0x40043100

                          AREA ||i._ReloadPDMA||, CODE, READONLY, ALIGN=2

                  _ReloadPDMA PROC
;;;665    
;;;666    void _ReloadPDMA()
000000  b538              PUSH     {r3-r5,lr}
;;;667    {
;;;668        /* transfer width is half word(16 bit) and transfer count is ADCDatalenght+1 */
;;;669        PDMA_SetTransferCnt(PDMA, PDMAchannel, PDMA_WIDTH_16, ADCDatalenght+1);
000002  4c08              LDR      r4,|L75.36|
000004  2201              MOVS     r2,#1
000006  2311              MOVS     r3,#0x11
000008  0312              LSLS     r2,r2,#12
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       PDMA_SetTransferCnt
;;;670    
;;;671        /* Select PDMA request source as ADC RX */
;;;672        PDMA_SetTransferMode(PDMA, PDMAchannel, PDMA_ADC_RX, FALSE, (uint32_t) NULL);
000012  2100              MOVS     r1,#0
000014  460b              MOV      r3,r1
000016  9100              STR      r1,[sp,#0]
000018  2214              MOVS     r2,#0x14
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       PDMA_SetTransferMode
;;;673    }
000022  bd38              POP      {r3-r5,pc}
;;;674    
                          ENDP

                  |L75.36|
                          DCD      0x40008000

                          AREA ||i.simple_test||, CODE, READONLY, ALIGN=1

                  simple_test PROC
;;;1183   
;;;1184   void simple_test(void)
000000  b510              PUSH     {r4,lr}
;;;1185   {
;;;1186   	L_R_WING_MOTOR_HIN_PWM_Set(68);
000002  2044              MOVS     r0,#0x44
000004  f7fffffe          BL       L_R_WING_MOTOR_HIN_PWM_Set
;;;1187   	L_R_WING_MOTOR_LIN_PWM_Set(54);
000008  2036              MOVS     r0,#0x36
00000a  f7fffffe          BL       L_R_WING_MOTOR_LIN_PWM_Set
;;;1188   
;;;1189   	L_R_WING_RING_LED_PWM_Set(20,30,40);
00000e  2228              MOVS     r2,#0x28
000010  211e              MOVS     r1,#0x1e
000012  2014              MOVS     r0,#0x14
000014  f7fffffe          BL       L_R_WING_RING_LED_PWM_Set
;;;1190   }
000018  bd10              POP      {r4,pc}
;;;1191   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_i32ConversionData
                          %        34
                  Buffer_IN_packet
                          %        9

                          AREA ||.data||, DATA, ALIGN=2

                  ADCDataReady
000000  00                DCB      0x00
                  EventFlag_INPacketToMaster
000001  00                DCB      0x00
                  EventFlag_OUTPacketFromMaster
000002  00                DCB      0x00
                  ButtonStatus
000003  00                DCB      0x00
                  AVdd
000004  0000              DCW      0x0000
                  Temp_trigger_level
000006  0000              DCW      0x0000
                  Tepm_X
000008  0000              DCW      0x0000
                  Tepm_Y
00000a  0000              DCW      0x0000
                  ||CNT||
00000c  0000              DCW      0x0000
00000e  0000              DCB      0x00,0x00
                  g_u32AdcIntFlag
                          DCD      0x00000000
                  g_u32ADCounter
                          DCD      0x00000000
                  g_u32ResultSum
                          DCD      0x00000000
                  Buffer_OUT_packet
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  0000              DCB      0x00,0x00

                          AREA ||area_number.81||, DATA, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.data||
                  s_I2C0HandlerFn
                          DCD      0x00000000

                          AREA ||area_number.82||, DATA, ALIGN=0

                          EXPORTAS ||area_number.82||, ||.data||
                  SLAVE_I2C_DATA_TPYE_T
000000  00                DCB      0x00

                          AREA ||area_number.83||, DATA, ALIGN=0

                          EXPORTAS ||area_number.83||, ||.data||
                  SLAVE_I2C_LIGHTING_TPYE_T
000000  00                DCB      0x00

                          AREA ||area_number.84||, DATA, ALIGN=0

                          EXPORTAS ||area_number.84||, ||.data||
                  SLAVE_I2C_OPERATION_MODE_T
000000  00                DCB      0x00

                          AREA ||area_number.85||, DATA, ALIGN=0

                          EXPORTAS ||area_number.85||, ||.data||
                  SLAVE_I2C_WRITE_REGISTER_FLAG_T
000000  00                DCB      0x00

                          AREA ||area_number.86||, DATA, ALIGN=0

                          EXPORTAS ||area_number.86||, ||.data||
                  SLAVE_I2C_READ_REGISTER_FLAG_T
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\hw_config.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_5a377792____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_hw_config_c_5a377792____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_5a377792____REVSH|
#line 402
|__asm___11_hw_config_c_5a377792____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
